/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package schoolmanagement;

import DBConnect.DBconnection;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Rectangle;
import java.awt.Toolkit;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.sql.Connection;
import java.sql.ResultSet;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Arrays;
import javax.imageio.ImageIO;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import jdk.nashorn.internal.ir.RuntimeNode;
import net.proteanit.sql.DbUtils;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.category.DefaultCategoryDataset;

/**
 *
 * @author Dinesh
 */
public class MarkSheet extends javax.swing.JFrame {

    /**
     * Creates new form MarkSheet
     */
    public MarkSheet() {
        super("Mark-Sheet");
        initComponents();
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        this.setLocation(dim.width/2-this.getSize().width/2, dim.height/2-this.getSize().height/2);
        fillComboClass();
        textStudentid.setEditable(false);
        textYear.setText("2075");
        textPasspercentage.setText("32");
        textRollno.setText("1");
        jLabel29.setVisible(false);
        textResult.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jLabel12 = new javax.swing.JLabel();
        comboTermexam = new javax.swing.JComboBox();
        jButton6 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();
        jButton11 = new javax.swing.JButton();
        jButton13 = new javax.swing.JButton();
        jButton14 = new javax.swing.JButton();
        jButton15 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        labelName = new javax.swing.JLabel();
        labelClass = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableMarks = new javax.swing.JTable();
        labelRollno = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        labelObtainedmarks = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        labelTerm = new javax.swing.JLabel();
        jLabel32 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        textPercentage = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        textAttendance = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        textGrade = new javax.swing.JTextField();
        jLabel28 = new javax.swing.JLabel();
        textGPA = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        textPosition = new javax.swing.JTextField();
        jLabel29 = new javax.swing.JLabel();
        textResult = new javax.swing.JTextField();
        jLabel21 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        jLabel33 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        jLabel13 = new javax.swing.JLabel();
        textFirstep = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        textSecondep = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        textThirdep = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        textFourthep = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jButton10 = new javax.swing.JButton();
        jButton12 = new javax.swing.JButton();
        panelMarks = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        textYear = new javax.swing.JTextField();
        textStudentid = new javax.swing.JTextField();
        jLabel26 = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        comboClass = new javax.swing.JComboBox();
        textRollno = new javax.swing.JTextField();
        textPasspercentage = new javax.swing.JTextField();
        jLabel31 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel30 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        textNumberOfSt = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        textTotalattendance = new javax.swing.JTextField();
        checkboxShowresult = new javax.swing.JCheckBox();
        checkboxShowresult1 = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("MarkSheet");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Single Term Mark-Sheet"));

        jButton1.setText("Show");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel12.setText("Term:");

        comboTermexam.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "First Terminal Exam", "Second Terminal Exam", "Third Terminal Exam", "Fourth Terminal Exam" }));

        jButton6.setText("Print");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton5.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButton5.setText("<-");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButton3.setText("->");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton9.setText("Refresh Positions");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        jButton11.setText("Print All");
        jButton11.setNextFocusableComponent(textFirstep);
        jButton11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton11ActionPerformed(evt);
            }
        });

        jButton13.setText("Show GS");
        jButton13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton13ActionPerformed(evt);
            }
        });

        jButton14.setText("Next GS");
        jButton14.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton14ActionPerformed(evt);
            }
        });

        jButton15.setText("Prev GS");
        jButton15.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton15ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel12)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(comboTermexam, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(24, 24, 24))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jButton5)
                                .addGap(2, 2, 2)
                                .addComponent(jButton15, javax.swing.GroupLayout.DEFAULT_SIZE, 72, Short.MAX_VALUE))
                            .addComponent(jButton9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(26, 26, 26)
                                .addComponent(jButton6)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jButton3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 69, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jButton13)
                                    .addComponent(jButton14))
                                .addContainerGap())
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jButton11)
                                .addGap(53, 53, 53))))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(comboTermexam, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 16, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton9)
                    .addComponent(jButton1)
                    .addComponent(jButton13))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButton5)
                        .addComponent(jButton3)
                        .addComponent(jButton14))
                    .addComponent(jButton15))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton6)
                    .addComponent(jButton11))
                .addContainerGap())
        );

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel4.setText("NAME OF THE STUDENT:");

        jLabel5.setText("CLASS:");

        jLabel6.setText("ROLL NO.:");

        labelName.setFont(new java.awt.Font("MS Reference Sans Serif", 1, 12)); // NOI18N

        labelClass.setFont(new java.awt.Font("MS Reference Sans Serif", 1, 12)); // NOI18N

        tableMarks.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(tableMarks);

        labelRollno.setFont(new java.awt.Font("MS Reference Sans Serif", 1, 12)); // NOI18N

        jLabel7.setText("TOTAL OBTAINED MARKS:");

        labelObtainedmarks.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));

        jPanel4.setLayout(null);

        jLabel17.setIcon(new javax.swing.ImageIcon(getClass().getResource("/schoolmanagement/Logo (120x120).jpg"))); // NOI18N
        jPanel4.add(jLabel17);
        jLabel17.setBounds(0, 0, 120, 120);

        jLabel18.setFont(new java.awt.Font("Monospaced", 1, 28)); // NOI18N
        jLabel18.setText("Rising Nepal");

        jLabel19.setFont(new java.awt.Font("Monospaced", 0, 18)); // NOI18N
        jLabel19.setText("Secondary Boarding School");

        jLabel20.setFont(new java.awt.Font("Space Bd BT", 0, 24)); // NOI18N
        jLabel20.setText("     Mark-Sheet");

        labelTerm.setFont(new java.awt.Font("Space Bd BT", 0, 18)); // NOI18N
        labelTerm.setText("First Terminal Examination 2073");

        jLabel32.setFont(new java.awt.Font("Mongolian Baiti", 0, 14)); // NOI18N
        jLabel32.setText("Ratuwamai-6, Province-1");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel3Layout.createSequentialGroup()
                                        .addComponent(jLabel18)
                                        .addGap(0, 0, Short.MAX_VALUE))
                                    .addComponent(jLabel19, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                                        .addGap(0, 0, Short.MAX_VALUE)
                                        .addComponent(jLabel32)
                                        .addGap(91, 91, 91))))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGap(32, 32, 32)
                                .addComponent(jLabel20, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(labelTerm, javax.swing.GroupLayout.PREFERRED_SIZE, 319, javax.swing.GroupLayout.PREFERRED_SIZE))))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(1, 1, 1)
                        .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel32)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel20, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(labelTerm, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jLabel24.setText("_______________________");

        jLabel25.setText("CLASS TEACHER");

        jPanel5.setBackground(new java.awt.Color(255, 255, 255));

        jLabel8.setText("Percentage:");

        textPercentage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textPercentageActionPerformed(evt);
            }
        });

        jLabel9.setText("Attendance:");

        jLabel10.setText("Grade:");

        jLabel28.setText("GPA:");

        jLabel11.setText("Position:");

        jLabel29.setText("Result:");

        jLabel21.setText("_______________________");

        jLabel22.setText("PRINCIPAL");

        jLabel33.setIcon(new javax.swing.ImageIcon(getClass().getResource("/schoolmanagement/Signature.jpg"))); // NOI18N

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addComponent(jLabel33, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(11, Short.MAX_VALUE))
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel22)
                        .addGap(40, 40, 40))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(jLabel21))
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel9)
                                    .addComponent(jLabel8)
                                    .addComponent(jLabel10))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(textAttendance)
                                    .addComponent(textPercentage)
                                    .addComponent(textGrade)))
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel11)
                                    .addComponent(jLabel28)
                                    .addComponent(jLabel29))
                                .addGap(23, 23, 23)
                                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(textPosition)
                                    .addComponent(textGPA)
                                    .addComponent(textResult))))))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(textPercentage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(textAttendance, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(textGrade, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel28)
                    .addComponent(textGPA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(textPosition, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel29)
                    .addComponent(textResult, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel33, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel21)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel22))
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                            .addGap(37, 37, 37)
                            .addComponent(jLabel25)
                            .addGap(239, 239, 239))
                        .addGroup(jPanel2Layout.createSequentialGroup()
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel24)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(jLabel7)
                                        .addGap(18, 18, 18)
                                        .addComponent(labelObtainedmarks, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 295, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGap(61, 61, 61)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel5)
                                    .addComponent(jLabel6))
                                .addGap(22, 22, 22)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(labelRollno, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(labelClass, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(labelName, javax.swing.GroupLayout.PREFERRED_SIZE, 291, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(299, 299, 299)
                                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(26, 26, 26))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(labelName, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(labelClass, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(labelRollno, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(249, 249, 249)
                                .addComponent(labelObtainedmarks, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel7)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 55, Short.MAX_VALUE)
                        .addComponent(jLabel24)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel25))
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Combined Mark-Sheet"));

        jLabel13.setText("First term weightage percentage:");

        jLabel14.setText("Second term weightage percentage:");

        jLabel15.setText("Thrid term weightage percentage:");

        jLabel16.setText("Fourth term weightage percentage:");

        jButton2.setText("Show");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton7.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButton7.setText("Previous");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jButton4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButton4.setText("Next");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton8.setText("Print");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        jButton10.setText("Refresh Positions");
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });

        jButton12.setText("Print All");
        jButton12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton12ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel13)
                            .addComponent(jLabel14)
                            .addComponent(jLabel15)
                            .addComponent(jLabel16))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 58, Short.MAX_VALUE)
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(textFirstep)
                            .addComponent(textSecondep)
                            .addComponent(textThirdep)
                            .addComponent(textFourthep, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jButton8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton7, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButton4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton12, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 95, Short.MAX_VALUE))))
                .addGap(23, 23, 23))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(textFirstep, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel14)
                    .addComponent(textSecondep, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel15)
                    .addComponent(textThirdep, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel16)
                    .addComponent(textFourthep, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(jButton10))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton7)
                    .addComponent(jButton4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton8)
                    .addComponent(jButton12))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        panelMarks.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Diagrammatic Representation of Mark-Sheet"));

        javax.swing.GroupLayout panelMarksLayout = new javax.swing.GroupLayout(panelMarks);
        panelMarks.setLayout(panelMarksLayout);
        panelMarksLayout.setHorizontalGroup(
            panelMarksLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 413, Short.MAX_VALUE)
        );
        panelMarksLayout.setVerticalGroup(
            panelMarksLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "For"));

        jLabel26.setText("Year:");

        jLabel27.setText("Student ID:");

        comboClass.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboClassItemStateChanged(evt);
            }
        });

        jLabel31.setText("%");

        jLabel2.setText("Class: *");

        jLabel3.setText("Roll No.: *");

        jLabel30.setText("Pass Percentage:");

        jLabel23.setText("Number of Students:");

        textNumberOfSt.setNextFocusableComponent(comboTermexam);

        jLabel1.setText("Total Attendance:");

        checkboxShowresult.setText("Result");
        checkboxShowresult.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                checkboxShowresultItemStateChanged(evt);
            }
        });

        checkboxShowresult1.setText("Position");
        checkboxShowresult1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                checkboxShowresult1ItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jLabel27))
                .addGap(18, 18, 18)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(comboClass, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(textStudentid, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel30)
                    .addComponent(jLabel26))
                .addGap(20, 20, 20)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(textYear, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(textPasspercentage, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel31)))
                .addGap(29, 29, 29)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                        .addComponent(jLabel23)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(23, 23, 23)))
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(textTotalattendance, javax.swing.GroupLayout.DEFAULT_SIZE, 58, Short.MAX_VALUE)
                    .addComponent(textNumberOfSt))
                .addGap(18, 18, 18)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(checkboxShowresult))
                .addGap(18, 18, 18)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(checkboxShowresult1)
                    .addComponent(textRollno, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(textYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel1)
                        .addComponent(textTotalattendance, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel3)
                        .addComponent(textRollno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(comboClass, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel26))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel27)
                            .addComponent(textStudentid, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel30)
                            .addComponent(textPasspercentage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel31)
                            .addComponent(jLabel23)
                            .addComponent(textNumberOfSt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(checkboxShowresult)
                            .addComponent(checkboxShowresult1))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(panelMarks, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 491, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(panelMarks, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        showMS();
    }//GEN-LAST:event_jButton1ActionPerformed

    public void showMS()
    {
        textAttendance.setText(null);
        textGrade.setText(null);
        textPercentage.setText(null);
        labelObtainedmarks.setText(null);
        
        //this function shows the mark-sheet with all computations
        forMarkSheet();
        showMarksheet();
        showBarDiagram();
        labelClass.setText((String)comboClass.getSelectedItem());
        labelRollno.setText(textRollno.getText());
        String exam=null;
        if(null != (String)comboTermexam.getSelectedItem())
        switch ((String)comboTermexam.getSelectedItem()) {
            case "First Terminal Exam":
                exam = "1";
                break;
            case "Second Terminal Exam":
                exam= "2";
                break;
            case "Third Terminal Exam":
                exam= "3";
                break;
            default:
                exam= "4";
                break;
        }
        //FM percent, Grade and GPA by the function below
        getFMandPercent((String)comboClass.getSelectedItem(),textRollno.getText(), exam);
        getAttendance((String)comboClass.getSelectedItem(),textRollno.getText(), exam);       
        showResult();
        showTerm((String)comboTermexam.getSelectedItem());
        showPosition();
        
    }
    private void showTerm(String term)
    {
        jLabel20.setVisible(true);
        if(term.equals("First Terminal Exam"))
        {
            labelTerm.setText("First Terminal Examination "+textYear.getText());
        }
        else if(term.equals("Second Terminal Exam"))
        {
            labelTerm.setText("Second Terminal Examination "+textYear.getText());
        }
        else if(term.equals("Third Terminal Exam"))
        {
            labelTerm.setText("Third Terminal Examination "+textYear.getText());
        }
        else if(term.equals("Fourth Terminal Exam"))
        {
            labelTerm.setText("Fourth Terminal Examination "+textYear.getText());
        }
    }
    private void showPosition()
    {
        ResultSet rs5;
        java.sql.PreparedStatement pstmt5;
        String id = textStudentid.getText();
        try
        {
            DBConnect.DBconnection roy = new DBconnection();
            Connection con = roy.getConnection();
            pstmt5 = con.prepareStatement("select 1 + count(*) from temporary " +
                    " where temporary.TOTALOM > (select t2.TOTALOM from temporary t2 where t2.STUDENTID = '"+id+"');");
            rs5 = pstmt5.executeQuery();
            while(rs5.next())
            {
                textPosition.setText(""+rs5.getInt(1));
            }
        }
        catch(Exception e)
        {
            
        }
        
    }
    
    private void beforeCalculatingPosition()
    {
        String clas=(String)comboClass.getSelectedItem(), year=textYear.getText();
        ArrayList<Integer> studentid = new ArrayList<>(7);
        ArrayList<Float> totomlist = new ArrayList<>(7);
        ArrayList<Float> omlist = new ArrayList<>();
        String term = getTerm((String)comboTermexam.getSelectedItem());
        int numberOfSub=0;
        ResultSet rs,rs1, rs2, rs5;
        try
        {
            
            DBConnect.DBconnection roy = new DBconnection();
            Connection con = roy.getConnection();
            java.sql.PreparedStatement pstmt, pstmt1, pstmt2, pstmt3, pstmt4, pstmt5;
            
            //lets clear up the table by deleting the data
            pstmt4 = con.prepareStatement("DELETE FROM temporary WHERE 1");
            pstmt4.executeUpdate();
            
            
            pstmt = con.prepareStatement("select STUDENTID from idclassroll"
                    + " where CLASS='"+clas+"' AND YEAR='"+year+"'");
            rs = pstmt.executeQuery();
            while(rs.next())
            {
                studentid.add(rs.getInt("STUDENTID"));
            }
            pstmt1=con.prepareStatement("select count(SUBJECTS) from subject"
                    + " where CLASS='"+clas+"' AND YEAR='"+year+"'");
            rs1=pstmt1.executeQuery();
            while(rs1.next())
            {
                numberOfSub=rs1.getInt(1);
            }
            for(int j=0;j<studentid.size();j++)
            {
                
                pstmt2 = con.prepareStatement("select om.OBTAINEDMARKS from om"
                        + " RIGHT JOIN subject on om.SUBJECTS=subject.SUBJECTS and om.CLASS=subject.CLASS"
                        + " WHERE om.CLASS='"+clas+"' and om.STUDENTID='"+studentid.get(j)+"' and om.TERM='"+term+"' "
                        + "and om.YEAR='"+year+"' and subject.YEAR='"+year+"'");
                rs2 = pstmt2.executeQuery();
//                int count=0;
                int i=0;
                while(rs2.next())
                {
                    omlist.add(i,rs2.getFloat(1)); 
//                    omlist.add(rs2.getFloat(1));
//                    count = rs2.getInt(2);
//                    System.out.println(count+" ");
                    i++;
                }
                
                float temp = 0;
                //size is not good here-must be number of subjects
                for(int a=0;a<numberOfSub;a++)
                {
                    temp=temp+omlist.get(a);
                }
                
                totomlist.add(j, temp);
//                omlist.removeAll(omlist);
//                System.out.println(studentid.get(j)+" "+totomlist.get(j));
            }
            
            //another fresh loop to insert data to temporary table
            //still error in adding the totmarks --check once
            for(int i=0;i<totomlist.size();i++)
            {
                
//                System.out.println(totomlist.get(i)+"  "+studentid.get(i));
                int id = Integer.parseInt(studentid.get(i).toString());
                float totom = Float.parseFloat(totomlist.get(i).toString());
//                System.out.println(id+" "+totom);
                pstmt3 = con.prepareStatement("INSERT INTO temporary values ("
                        + " '"+id+"', '"+totom+"')");
                pstmt3.executeUpdate();
            }
            
            
            
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null, "Error: "+e);
        }
    }
    
    private String getTerm(String term)
    {
        String exam = null;
        if(null != term)
            switch (term) {
                case "First Terminal Exam":
                    exam = "1";
                    break;
                case "Second Terminal Exam":
                    exam= "2";
                    break;
                case "Third Terminal Exam":
                    exam= "3";
                    break;
                default:
                    exam= "4";
                    break;
            }
        //tested works
        return exam;
    }
    private void showResult()
    {
        //calculates the result
        try
        {
            int numRows = tableMarks.getRowCount();
            ArrayList<Object> fullmarks = new ArrayList<>(10);
            ArrayList<Object> marks= new ArrayList<>(10);

            DefaultTableModel model = (DefaultTableModel) this.tableMarks.getModel();
            for(int i=0;i<numRows;i++)
            {
                marks.add(model.getValueAt(i, 3));
                fullmarks.add(model.getValueAt(i, 1));
            }


            for(int i=0;i<numRows;i++)
            {
                if(Float.parseFloat(marks.get(i).toString())>=Float.parseFloat(fullmarks.get(i).toString())*Float.parseFloat(textPasspercentage.getText())/100)
                {
                    textResult.setText("Pass");
                }
                else
                {
                    textResult.setText("Fail");
                    break;
                }
            }
        }   
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null, "Error in compution of the 'Result'.\nError type: "+e);
        }
        
        
    }
    private void showBarDiagram()
    {
        try
        {
            int numRows = tableMarks.getRowCount();
            ArrayList<Object> subjects = new ArrayList<>(10);
            ArrayList<Object> marks= new ArrayList<>(10);
            Object [] subject = new Object [12];
            Object [] mark = new Object [12];
            DefaultTableModel model = (DefaultTableModel) this.tableMarks.getModel();
            for(int i=0; i<numRows ; i++ ) 
            {

                subjects.add(model.getValueAt(i, 0));
                marks.add(model.getValueAt(i, 3));
    //            subject[i] = model.getValueAt(tableMarks.getSelectedRow(), 0);
    //            mark[i] = model.getValueAt(tableMarks.getSelectedRow(), 3);

            }

            DefaultCategoryDataset dataset = new DefaultCategoryDataset();
            for(int i=0;i<numRows;i++)
            {
                dataset.setValue(Float.parseFloat(marks.get(i).toString()), "Marks", subjects.get(i).toString());
            }

            JFreeChart chart = ChartFactory.createBarChart("Mark-Sheet (Bar Diagram)", "Subjects", "Marks", dataset, PlotOrientation.VERTICAL, false, true, false);

            CategoryPlot p = chart.getCategoryPlot();
            p.setRangeGridlinePaint(Color.BLACK);
    //        panelChart.setLayout(BorderLayout);
            Dimension panelSize = panelMarks.getSize();
            ChartPanel roy = new ChartPanel(chart);
            panelMarks.removeAll();
            panelMarks.add(roy, BorderLayout.CENTER);
            roy.setSize(panelSize);
            panelMarks.validate();
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null, "Error: "+e);
        }

    }
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        
        showCombinedMS();
    }//GEN-LAST:event_jButton2ActionPerformed

    public void showCombinedMS()
    {
        //this part takes the effective percentages
        int firstep, secondep, thirdep, fourthep;
        if(textFirstep.getText().equals(""))
        {
            firstep = 0;
        }
        else
        {
            firstep = Integer.parseInt(textFirstep.getText());
        }
        
        if(textSecondep.getText().equals(""))
        {
            secondep = 0;
        }
        else
        {
            secondep = Integer.parseInt(textSecondep.getText());
        }
        
        if(textThirdep.getText().equals(""))
        {
            thirdep = 0;
        }
        else
        {
            thirdep = Integer.parseInt(textThirdep.getText());
        }
        
        if(textFourthep.getText().equals(""))
        {
            fourthep = 0;
        }
        else
        {
            fourthep = Integer.parseInt(textFourthep.getText());
        }
        int fm=firstep+secondep+thirdep+fourthep;
        if(fm==100)
        {
            //this function does the main thing
            computeEffectiveOM(firstep,secondep, thirdep, fourthep);
            
            
            showBarDiagram();         
            showResult();
            jLabel20.setVisible(false);
            labelTerm.setText("       Annual Mark-Sheet "+textYear.getText());
            showPosition();
        }
        else
        {
            JOptionPane.showMessageDialog(null, "Enter EPs properly.\nSum of effective percentages must be 100!");
        }
    }
    private void beforeCalculatingPositionForCombinedMS(int ep1, int ep2, int ep3, int ep4)
    {
        
        String clas=(String) comboClass.getSelectedItem();
        String year = textYear.getText();
        ArrayList<Integer> studentid = new ArrayList<>(7);
        ArrayList<Float> omlist1 = new ArrayList<>(7);
        ArrayList<Float> omlist2 = new ArrayList<>(5);
        ArrayList<Float> omlist3 = new ArrayList<>(5);
        ArrayList<Float> omlist4 = new ArrayList<>(5);
        ArrayList<Float> testlist = new ArrayList<>(5);
        ArrayList<String> sublist = new ArrayList<>(5);
        ArrayList<String> fmlist = new ArrayList<>(5);
        ArrayList<String> pmlist = new ArrayList<>(5);
        float test=0;
        
        ResultSet rs1, rs2, rs3, rs4, rs5, rs7, rs9;
        
        try
        {
            
            DBConnect.DBconnection roy = new DBconnection();
            Connection con = roy.getConnection();
            java.sql.PreparedStatement pstmt1, pstmt2, pstmt3, pstmt4, pstmt5, pstmt7, pstmt8, pstmt9;
            
            //get studentid then run a loop for all ids
            pstmt8 = con.prepareStatement("DELETE FROM temporary WHERE 1");
            pstmt8.executeUpdate();
            
            
            pstmt9 = con.prepareStatement("select STUDENTID from idclassroll"
                    + " where CLASS='"+clas+"' AND YEAR='"+year+"' order by ROLLNO ASC");
            rs9 = pstmt9.executeQuery();
            while(rs9.next())
            {
                studentid.add(rs9.getInt("STUDENTID"));
            }
            
            
            for(int j=0;j<studentid.size();j++)
            {
                String term="1";
                pstmt1 = con.prepareStatement("select om.SUBJECTS, subject.FULLMARKS, subject.PASSMARKS, om.OBTAINEDMARKS from om"
                        + " RIGHT JOIN subject on om.SUBJECTS=subject.SUBJECTS and om.CLASS=subject.CLASS"
                        + " WHERE om.CLASS='"+clas+"' and om.STUDENTID='"+studentid.get(j)+"' and om.TERM='"+term+"' and om.YEAR='"+year+"' and subject.YEAR='"+year+"'");
                rs1 = pstmt1.executeQuery();
                while(rs1.next())
                {
                    omlist1.add(rs1.getFloat(4));       
                    omlist2.add(test);
                    omlist3.add(test);
                    omlist4.add(test);
                    sublist.add(rs1.getString(1));
                    fmlist.add(rs1.getString(2));
                    pmlist.add(rs1.getString(3));
                }
                //done for the number of subjects
                int size = omlist1.size();
    //            for(Float n:omlist1)
    //                System.out.println("First:"+n);
                term="2";
                pstmt2 = con.prepareStatement("select om.SUBJECTS, subject.FULLMARKS, om.OBTAINEDMARKS from om"
                        + " RIGHT JOIN subject on om.SUBJECTS=subject.SUBJECTS and om.CLASS=subject.CLASS"
                        + " WHERE om.CLASS='"+clas+"' and om.STUDENTID='"+studentid.get(j)+"' and om.TERM='"+term+"' and om.YEAR='"+year+"'");
                rs2 = pstmt2.executeQuery();
                int n=0;
                while(rs2.next())
                {
                    omlist2.add(n, rs2.getFloat(3));              
                    n++;
                }
                term="3";
                pstmt3 = con.prepareStatement("select om.SUBJECTS, subject.FULLMARKS, om.OBTAINEDMARKS from om"
                        + " RIGHT JOIN subject on om.SUBJECTS=subject.SUBJECTS and om.CLASS=subject.CLASS"
                        + " WHERE om.CLASS='"+clas+"' and om.STUDENTID='"+studentid.get(j)+"' and om.TERM='"+term+"' and om.YEAR='"+year+"'");
                rs3 = pstmt3.executeQuery();
                n=0;
                while(rs3.next())
                {
                    omlist3.add(n,rs3.getFloat(3));              
                    n++;
                }
                term="4";
                pstmt4 = con.prepareStatement("select om.SUBJECTS, subject.FULLMARKS, om.OBTAINEDMARKS from om"
                        + " RIGHT JOIN subject on om.SUBJECTS=subject.SUBJECTS and om.CLASS=subject.CLASS"
                        + " WHERE om.CLASS='"+clas+"' and om.STUDENTID='"+studentid.get(j)+"' and om.TERM='"+term+"' and om.YEAR='"+year+"'");
                rs4 = pstmt4.executeQuery();
                n=0;
                while(rs4.next())
                {
                    omlist4.add(n,rs4.getFloat(3));              
                    testlist.add(rs4.getFloat(3));
                    n++;
                }
                DecimalFormat df = new DecimalFormat("#.#");

                ArrayList<Float> totallist = new ArrayList<Float>(5);
                float totom=0;
                for(int i=0;i<size;i++)
                {
                    totallist.add(omlist1.get(i)*ep1/100+omlist2.get(i)*ep2/100+omlist3.get(i)*ep3/100+omlist4.get(i)*ep4/100);
                    
                    totom=totom+totallist.get(i);
                }
                pstmt5=con.prepareStatement("INSERT INTO temporary values ('"+studentid.get(j)+"','"+totom+"', '"+(j+1)+"' )");
                pstmt5.executeUpdate();
                totallist.removeAll(totallist);
                omlist1.removeAll(omlist1);
                omlist2.removeAll(omlist2);
                omlist3.removeAll(omlist3);
                omlist4.removeAll(omlist4);
                
            }
            
//            for(Float x: testlist)
//                System.out.println("Test: "+x);
            
//            need to set if the null value than corresponding floating value to 0
            
//            computation of total effective marks
            
            
            
            String stid = textStudentid.getText();
             
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null, "Error: "+e);
        }
                    
    }
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        //showNextMS();
        try{
            int rollno;
            rollno = Integer.parseInt(textRollno.getText());
            textRollno.setText((rollno+1)+"");
            forMarkSheet();
            showMS();
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(this, e);
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    public void showNextMS()
    {
        try
        {
            int roll = Integer.parseInt(textRollno.getText());
            roll++;
            textRollno.setText(roll + "");
            textAttendance.setText(null);
            textGrade.setText(null);
            textPercentage.setText(null);
            labelObtainedmarks.setText(null);
            showMarksheet();
            labelClass.setText((String) comboClass.getSelectedItem());
            labelRollno.setText(textRollno.getText());
            String exam = null;
            if (null != (String) comboTermexam.getSelectedItem()) {
                switch ((String) comboTermexam.getSelectedItem()) {
                    case "First Terminal Exam":
                        exam = "1";
                        break;
                    case "Second Terminal Exam":
                        exam = "2";
                        break;
                    case "Third Terminal Exam":
                        exam = "3";
                        break;
                    default:
                        exam = "4";
                        break;
                }
            }
            getFMandPercent((String)comboClass.getSelectedItem(),textRollno.getText(), exam);
            getAttendance((String)comboClass.getSelectedItem(),textRollno.getText(), exam);       
            showBarDiagram();
            showResult();
            showTerm((String)comboTermexam.getSelectedItem());
            showPosition();
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null, "Please, check the inputs.\n"+e);
        }
    }
    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed

        try{
            int rollno;
            rollno = Integer.parseInt(textRollno.getText());
            textRollno.setText((rollno-1)+"");
            showMS();
            forMarkSheet();
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(this, e);
        }
        
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // TODO add your handling code here:
        String name=labelName.getText();
        captureComponent(jPanel2,name);
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        // TODO add your handling code here:
        try{
            if(textRollno.equals(""))
            {
                JOptionPane.showMessageDialog(null, "Enter rollno!");
            }
            else
            {
                int roll = Integer.parseInt(textRollno.getText());
                roll--;
                textRollno.setText(roll+"");
            }
            int firstep, secondep, thirdep, fourthep;
            if(textFirstep.getText().equals(""))
            {
                firstep = 0;
            }
            else
            {
                firstep = Integer.parseInt(textFirstep.getText());
            }

            if(textSecondep.getText().equals(""))
            {
                secondep = 0;
            }
            else
            {
                secondep = Integer.parseInt(textSecondep.getText());
            }

            if(textThirdep.getText().equals(""))
            {
                thirdep = 0;
            }
            else
            {
                thirdep = Integer.parseInt(textThirdep.getText());
            }

            if(textFourthep.getText().equals(""))
            {
                fourthep = 0;
            }
            else
            {
                fourthep = Integer.parseInt(textFourthep.getText());
            }
            int fm=firstep+secondep+thirdep+fourthep;
            if(fm==100)
            {
                computeEffectiveOM(firstep,secondep, thirdep, fourthep);
                showBarDiagram();
                showResult();
                showPosition();
            }
            else
            {
                JOptionPane.showMessageDialog(null, "Enter EPs properly.\nSum of effective percentages must be 100!");
            }
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null, "Error: "+e);
        }
        
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        showNextCombinedMS();
    }//GEN-LAST:event_jButton4ActionPerformed

    public void showNextCombinedMS()
    {
        try{
            if (textRollno.equals("")) {
                JOptionPane.showMessageDialog(null, "Enter rollno!");
            } else {
                int roll = Integer.parseInt(textRollno.getText());
                roll++;
                textRollno.setText(roll + "");
            }
            int firstep, secondep, thirdep, fourthep;
            if (textFirstep.getText().equals("")) {
                firstep = 0;
            } else {
                firstep = Integer.parseInt(textFirstep.getText());
            }

            if (textSecondep.getText().equals("")) {
                secondep = 0;
            } else {
                secondep = Integer.parseInt(textSecondep.getText());
            }

            if (textThirdep.getText().equals("")) {
                thirdep = 0;
            } else {
                thirdep = Integer.parseInt(textThirdep.getText());
            }

            if (textFourthep.getText().equals("")) {
                fourthep = 0;
            } else {
                fourthep = Integer.parseInt(textFourthep.getText());
            }
            int fm = firstep + secondep + thirdep + fourthep;
            if (fm == 100) {
                computeEffectiveOM(firstep, secondep, thirdep, fourthep);
                showBarDiagram();
                showResult();
                showPosition();
            } else {
                JOptionPane.showMessageDialog(null, "Enter EPs properly.\nSum of effective percentages must be 100!");
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error: " + e);
        }
    }
    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        // TODO add your handling code here:
        String name=labelName.getText();
        captureComponent(jPanel2,name);
    }//GEN-LAST:event_jButton8ActionPerformed

    private void textPercentageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textPercentageActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textPercentageActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        // TODO add your handling code here:
        //beforeCalculatingPosition();
        String term = getTerm((String) comboTermexam.getSelectedItem());
        beforeCalculatingPositionForSpecificTerm(term);
        showPosition();
    }//GEN-LAST:event_jButton9ActionPerformed

    private void beforeCalculatingPositionForSpecificTerm(String term)
    {
        String clas=(String) comboClass.getSelectedItem();
        String year = textYear.getText();
        ArrayList<Integer> studentid = new ArrayList<>(7);
        ArrayList<Float> omlist1 = new ArrayList<>(7);
        ArrayList<Float> omlist2 = new ArrayList<>(5);
        ArrayList<Float> omlist3 = new ArrayList<>(5);
        ArrayList<Float> omlist4 = new ArrayList<>(5);
        float test=0;
        
        ResultSet rs1,  rs9;
        
        try
        {
            
            DBConnect.DBconnection roy = new DBconnection();
            Connection con = roy.getConnection();
            java.sql.PreparedStatement pstmt1, pstmt5,  pstmt8, pstmt9;
            
            //get studentid then run a loop for all ids
            pstmt8 = con.prepareStatement("DELETE FROM temporary WHERE 1");
            pstmt8.executeUpdate();
            
            
            pstmt9 = con.prepareStatement("select STUDENTID from idclassroll"
                    + " where CLASS='"+clas+"' AND YEAR='"+year+"' order by ROLLNO ASC");
            rs9 = pstmt9.executeQuery();
            while(rs9.next())
            {
                studentid.add(rs9.getInt("STUDENTID"));
            }
            
            
            for(int j=0;j<studentid.size();j++)
            {
                pstmt1 = con.prepareStatement("select om.SUBJECTS, subject.FULLMARKS, subject.PASSMARKS, om.OBTAINEDMARKS from om"
                        + " RIGHT JOIN subject on om.SUBJECTS=subject.SUBJECTS and om.CLASS=subject.CLASS"
                        + " WHERE om.CLASS='"+clas+"' and om.STUDENTID='"+studentid.get(j)+"' and om.TERM='"+term+"' and om.YEAR='"+year+"' and subject.YEAR='"+year+"'");
                rs1 = pstmt1.executeQuery();
                while(rs1.next())
                {
                    omlist1.add(rs1.getFloat(4));       
                    omlist2.add(test);
                    omlist3.add(test);
                    omlist4.add(test);
                    
                }
                //done for the number of subjects
                //this may create a huge error
                //when the marks for first term is not added then the size will be zero and the error will be produced
                int size = omlist1.size();
    //            for(Float n:omlist1)
    //                System.out.println("First:"+n);
                //System.out.println(size);
                
                DecimalFormat df = new DecimalFormat("#.#");

                ArrayList<Float> totallist = new ArrayList<Float>(5);
                float totom=0;
                for(int i=0;i<size;i++)
                {
                    totallist.add(omlist1.get(i));
                    
                    totom=totom+totallist.get(i);
                    //System.out.println(totom+"\n");
                }
                pstmt5=con.prepareStatement("INSERT INTO temporary values ('"+studentid.get(j)+"','"+totom+"', '"+(j+1)+"' )");
                pstmt5.executeUpdate();
                totallist.removeAll(totallist);
                omlist1.removeAll(omlist1);
                omlist2.removeAll(omlist2);
                omlist3.removeAll(omlist3);
                omlist4.removeAll(omlist4);
                
            }
            
//            for(Float x: testlist)
//                System.out.println("Test: "+x);
            
//            need to set if the null value than corresponding floating value to 0
            
//            computation of total effective marks
            
            
            
            //String stid = textStudentid.getText();
             
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null, "Error: "+e);
        }
        
    }
    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
        // TODO add your handling code here:
        
        int firstep, secondep, thirdep, fourthep;
        if(textFirstep.getText().equals(""))
        {
            firstep = 0;
        }
        else
        {
            firstep = Integer.parseInt(textFirstep.getText());
        }
        
        if(textSecondep.getText().equals(""))
        {
            secondep = 0;
        }
        else
        {
            secondep = Integer.parseInt(textSecondep.getText());
        }
        
        if(textThirdep.getText().equals(""))
        {
            thirdep = 0;
        }
        else
        {
            thirdep = Integer.parseInt(textThirdep.getText());
        }
        
        if(textFourthep.getText().equals(""))
        {
            fourthep = 0;
        }
        else
        {
            fourthep = Integer.parseInt(textFourthep.getText());
        }
        int fm=firstep+secondep+thirdep+fourthep;
        if(fm==100)
        {
            beforeCalculatingPositionForCombinedMS(firstep, secondep, thirdep, fourthep);
            jLabel20.setVisible(false);
            labelTerm.setText("Annual Mark-Sheet "+textYear.getText());
            showPosition();
        }
        else
        {
            JOptionPane.showMessageDialog(null, "Enter EPs properly.\nSum of effective percentages must be 100!");
        }
        
    }//GEN-LAST:event_jButton10ActionPerformed

    private void comboClassItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboClassItemStateChanged
        // TODO add your handling code here:
        if(evt.getStateChange()==java.awt.event.ItemEvent.SELECTED)
        {
            String clas = (String) evt.getItem();
            //show next rollno
            //textRollno.setText("");
            showNoOfStudents(clas);
        }
    }//GEN-LAST:event_comboClassItemStateChanged

    private void jButton11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton11ActionPerformed
        // TODO add your handling code here:
        int option=JOptionPane.showConfirmDialog(null, "Are you sure you want to print "+textNumberOfSt.getText()+" Mark-Sheets?");
        if(option==JOptionPane.YES_OPTION)
        {
            
            showMS();
            String name=labelName.getText();
            
            tableMarks.getColumnModel().getColumn(0).setPreferredWidth(140);
            tableMarks.getColumnModel().getColumn(1).setPreferredWidth(40);
            tableMarks.getColumnModel().getColumn(2).setPreferredWidth(40);
            tableMarks.getColumnModel().getColumn(3).setPreferredWidth(40);
            
            captureComponent(jPanel2,name);
            JOptionPane.showMessageDialog(null,"The Mark-Sheet of "+name+" was saved!");
            for(int i=2;i<=Integer.parseInt(textNumberOfSt.getText());i++)
            {
                
                showNextMS();
                String nam=labelName.getText();
                
                tableMarks.getColumnModel().getColumn(0).setPreferredWidth(140);
                tableMarks.getColumnModel().getColumn(1).setPreferredWidth(40);
                tableMarks.getColumnModel().getColumn(2).setPreferredWidth(40);
                tableMarks.getColumnModel().getColumn(3).setPreferredWidth(40);
                
                captureComponent(jPanel2,nam);
                JOptionPane.showMessageDialog(null,"The Mark-Sheet of "+name+" was saved!");
            }
        }
        
    }//GEN-LAST:event_jButton11ActionPerformed

    private void jButton12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton12ActionPerformed
        // TODO add your handling code here:
        int option=JOptionPane.showConfirmDialog(null, "Are you sure you want to print "+textNumberOfSt.getText()+" Mark-Sheets?");
        if(option==JOptionPane.YES_OPTION)
        {
            showCombinedMS();
            String name=labelName.getText();
            captureComponent(jPanel2,name);

            for(int i=2;i<=Integer.parseInt(textNumberOfSt.getText());i++)
            {
                showNextCombinedMS();
                String nam=labelName.getText();
                captureComponent(jPanel2,nam);

            }
        }
        
        
    }//GEN-LAST:event_jButton12ActionPerformed

    private void checkboxShowresultItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_checkboxShowresultItemStateChanged
        // TODO add your handling code here:
        if(checkboxShowresult.isSelected())
        {
            jLabel29.setVisible(true);
            textResult.setVisible(true);
        }
        else
        {
            jLabel29.setVisible(false);
            textResult.setVisible(false);
        }
    }//GEN-LAST:event_checkboxShowresultItemStateChanged

    private void checkboxShowresult1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_checkboxShowresult1ItemStateChanged
        // TODO add your handling code here:
        if(checkboxShowresult1.isSelected())
        {
            jLabel11.setVisible(true);
            textPosition.setVisible(true);
            jLabel28.setVisible(true);
            textGPA.setVisible(true);
        }
        else
        {
            jLabel11.setVisible(false);
            textPosition.setVisible(false);
            jLabel28.setVisible(false);
            textGPA.setVisible(false);
        }
    }//GEN-LAST:event_checkboxShowresult1ItemStateChanged

    private void jButton13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton13ActionPerformed
        // TODO add your handling code here:
        try{
            forGradeSheet();
            showGS();
            showGrade();
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(this, e);
        }
        
    }//GEN-LAST:event_jButton13ActionPerformed

    private void jButton14ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton14ActionPerformed
        // TODO add your handling code here:
        try{
            int rollno;
            rollno = Integer.parseInt(textRollno.getText());
            textRollno.setText((rollno+1)+"");
            forGradeSheet();
            showGS();   
            showGrade();
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(this, e);
        }
        
    }//GEN-LAST:event_jButton14ActionPerformed

    private void jButton15ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton15ActionPerformed
        // TODO add your handling code here:
        try{
            int rollno;
            rollno = Integer.parseInt(textRollno.getText());
            textRollno.setText((rollno-1)+"");
            forGradeSheet();
            showGS();
            showGrade();
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(this, e);
        }
        
    }//GEN-LAST:event_jButton15ActionPerformed

    public void showGrade()
    {
        float x = Float.parseFloat(labelObtainedmarks.getText());
        if(x>=3.6)
        {
            textGrade.setText("A+");
            textResult.setText("Outstanding");
        }
        else if(x>=3.2&&x<3.6)
        {
            textGrade.setText("A");
            textResult.setText("Excellent");
        }
        else if(x>=2.8&&x<3.2)
        {
            textGrade.setText("B+");
            textResult.setText("Very Good");
        }
        else if(x>=2.4&&x<2.8)
        {
            textGrade.setText("B");
            textResult.setText("Good");
        }
        else if(x>=2&&x<2.4)
        {
            textGrade.setText("C+");
            textResult.setText("Satisfactory");
        }
        else if(x>=1.6&&x<2)
        {
            textGrade.setText("C");
            textResult.setText("Acceptable");
        }
        else if(x>=1.2&&x<1.6)
        {
            textGrade.setText("D+");
            textResult.setText("Partially Acceptable");
        }
        else if(x>=0.8&&x<1.2)
        {
            textGrade.setText("D");
            textResult.setText("Insufficient");
        }
        else if(x>=0.2&&x<0.8)
        {
            textGrade.setText("D");
            textResult.setText("Very Insufficient");
        }
        else
        {
            textGrade.setText("E");
            textResult.setText("Very Insufficient");
        }
    }
    public void forGradeSheet()
    {
        jLabel20.setText("    Grade-Sheet");
        jLabel7.setText("GRADE POINT AVERAGE:");
        jLabel8.setVisible(false);
        jLabel11.setVisible(false);
        jLabel29.setVisible(true);
        jLabel28.setVisible(false);
        textGPA.setVisible(false);
        textPercentage.setVisible(false);
        textPosition.setVisible(false);
        textResult.setVisible(true);
    }
    public void forMarkSheet()
    {
        jLabel20.setText("     Mark-Sheet");
        jLabel7.setText("TOTAL OBTAINED MARKS:");
        jLabel8.setVisible(true);
        jLabel11.setVisible(true);
        jLabel29.setVisible(true);
        jLabel28.setVisible(false);
        textGPA.setVisible(false);
        textPercentage.setVisible(true);
        textPosition.setVisible(true);
        textResult.setVisible(true);
    }
    public void showGS()
    {
        textAttendance.setText(null);
        textGrade.setText(null);
        textPercentage.setText(null);
        labelObtainedmarks.setText(null);
        
        //this function shows the mark-sheet with all computations
        showGradeSheet();
        //showBarDiagram();
        labelClass.setText((String)comboClass.getSelectedItem());
        labelRollno.setText(textRollno.getText());
        String exam=null;
        if(null != (String)comboTermexam.getSelectedItem())
        switch ((String)comboTermexam.getSelectedItem()) {
            case "First Terminal Exam":
                exam = "1";
                break;
            case "Second Terminal Exam":
                exam= "2";
                break;
            case "Third Terminal Exam":
                exam= "3";
                break;
            default:
                exam= "4";
                break;
        }
        //FM percent, Grade and GPA by the function below
        //getFMandPercent((String)comboClass.getSelectedItem(),textRollno.getText(), exam);
        getAttendance((String)comboClass.getSelectedItem(),textRollno.getText(), exam);       
        //showResult();
        showTerm((String)comboTermexam.getSelectedItem());
        //showPosition();
        showGradePointAverage();
    }
    public void showGradePointAverage()
    {
        int numRows = tableMarks.getRowCount();
        
        ArrayList<Object> gpa= new ArrayList<>(15);
        double tgp=0;
        DefaultTableModel model = (DefaultTableModel) this.tableMarks.getModel();
        for(int i=0;i<numRows;i++)
        {
            //gpa.add(model.getValueAt(i, 2));
            tgp = tgp + (Double)model.getValueAt(i, 2);
        }
        DecimalFormat df = new DecimalFormat("#.###");
        labelObtainedmarks.setText(df.format(tgp/numRows)+"");
        
    }
    
    public void showGradeSheet()
    {
        String clas=(String)comboClass.getSelectedItem();
        String rollno=textRollno.getText();
        String year = textYear.getText();
        String name;
        
        
        String exam=null;
        if(null != (String)comboTermexam.getSelectedItem())
        switch ((String)comboTermexam.getSelectedItem()) {
            case "First Terminal Exam":
                exam = "1";
                break;
            case "Second Terminal Exam":
                exam= "2";
                break;
            case "Third Terminal Exam":
                exam= "3";
                break;
            default:
                exam= "4";
                break;
        }
        String studentid=null;
        ResultSet rs;
        ResultSet rslt, rs3;
        try
        {
            DBConnect.DBconnection roy = new DBconnection();
            Connection con = roy.getConnection();
            java.sql.PreparedStatement pstmt, pstmt2, pstmt3;
            

            
            
            pstmt = con.prepareStatement("select om.SUBJECTS, subject.FULLMARKS, om.OBTAINEDMARKS from om"
                    + " RIGHT JOIN subject on om.SUBJECTS=subject.SUBJECTS and om.CLASS=subject.CLASS"
                    + " WHERE om.CLASS='"+clas+"' and om.ROLLNO='"+rollno+"' and om.TERM='"+exam+"' and om.YEAR='"+year+"' and subject.YEAR='"+year+"'");
            rs = pstmt.executeQuery();
            //tableMarks.setModel(DbUtils.resultSetToTableModel(rs));
                      

            Object[] column = {"SUBJECTS", "FG", "GP"};
            DefaultTableModel model = (DefaultTableModel) tableMarks.getModel();
            model.setColumnIdentifiers(column);
            tableMarks.setModel(model);
            model.setRowCount(0);
            double gpa=0;
            while(rs.next())
            {
                String sub = rs.getString("SUBJECTS");
                int fm = rs.getInt("FULLMARKS");
                float om = rs.getFloat("OBTAINEDMARKS");
                String finalgrade = converttofg(fm, om);
                double gradepoint = converttogp(finalgrade);
                gpa=gradepoint+gpa;
                model.addRow(new Object[]{sub, finalgrade, gradepoint});
            }
            
            //to get studentid
            pstmt3 = con.prepareStatement("SELECT STUDENTID FROM idclassroll WHERE CLASS='"+clas+"' and ROLLNO='"+rollno+"' AND YEAR='"+year+"'");
            rs3 = pstmt3.executeQuery();
            while(rs3.next())            
            {
                textStudentid.setText(rs3.getString("STUDENTID"));
            }
            
            //name on the basis of studentid
            String stid = textStudentid.getText();
            pstmt2 = con.prepareStatement("select NAME from studentdetails where STUDENTID='"+stid+"'");
            rslt = pstmt2.executeQuery();
            while(rslt.next())
            {
                name = rslt.getString("NAME");
                labelName.setText(name);
            } 
            
            tableMarks.getColumnModel().getColumn(0).setPreferredWidth(100);
            tableMarks.getColumnModel().getColumn(1).setPreferredWidth(40);
            tableMarks.getColumnModel().getColumn(2).setPreferredWidth(40);
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null, "Mark-Sheet not found. \nCheck Roll No.\nError: "+e);
        }
    }
    
    public String converttofg(float fm, float om)
    {
        float x;
        x= (om*100)/fm;
        String fg=null;
        if(x>=90)
        {
            fg="A+";
        }
        else if(x>=80&&x<90)
        {
            fg="A";
        }
        else if(x>=70&&x<80)
        {
            fg="B+";
        }
        else if(x>=60&&x<70)
        {
            fg="B";
        }
        else if(x>=50&&x<60)
        {
            fg="C+";
        }
        else if(x>=40&&x<50)
        {
            fg="C";
        }
        else if(x>=30&&x<40)
        {
            fg="D+";
        }
        else if(x>=20&&x<30)
        {
            fg="D";
        }
        else if(x>0)
        {
            fg="E";
        }
        else
        {
            fg="ABS";
        }
        return fg;
    }
    public double converttogp(String fg)
    {
        double a=0.0;
        if(fg=="A+")
        {
            a = 4;
        }
        else if(fg=="A")
        {
            a = 3.6;
        }
        else if(fg=="B+")
        {
            a=3.2;
        }
        else if(fg=="B")
        {
            a=2.8;
        }
        else if(fg=="C+")
        {
            a=2.4;
        }
        else if(fg=="C")
        {
            a=2;
        }
        else if(fg=="D+")
        {
            a=1.6;
        }
        else if(fg=="D")
        {
            a=1.2;
        }
        else if(fg=="E")
        {
            a=0.8;
        }
        else
        {
            a=0;
        }
        return a;
    }
    
    private void showNoOfStudents(String clas)
    {
        String year = textYear.getText();
        ResultSet rs;
        try
        {
            DBConnect.DBconnection roy = new DBconnection();
            Connection con = roy.getConnection();
            java.sql.PreparedStatement pstmt;
            pstmt = con.prepareStatement("select count(ROLLNO) from idclassroll where CLASS='"+clas+"' and YEAR='"+year+"'");
            rs = pstmt.executeQuery();
            while(rs.next())
            {                
                textNumberOfSt.setText(rs.getInt(1)+"");
            }
        }
        catch(Exception e)
        {
//            JOptionPane.showMessageDialog(null, "Error: "+e);
        }
    }
    void captureComponent(Component component,String name) {
        Rectangle rect = component.getBounds();

        try {
            String format = "png";
            String fileName = (String)comboClass.getSelectedItem()+" "+name + "." + format;
            String nameAndPath = "C:\\Mark-Sheet\\"+fileName;
            File outputFile = new File(nameAndPath);
            outputFile.getParentFile().mkdirs();
            BufferedImage captureImage =
                    new BufferedImage(rect.width, rect.height,
                                        BufferedImage.TYPE_INT_ARGB);
            component.paint(captureImage.getGraphics());

//            ImageIO.write(captureImage, format, new File(fileName));
            ImageIO.write(captureImage, format, outputFile);

//            JOptionPane.showMessageDialog(null,"The Mark-Sheet of "+name+" was saved!");
        } catch (IOException ex) {
            System.err.println(ex);
        }
    }
    private void computeEffectiveOM(int ep1, int ep2, int ep3, int ep4)
    {
        Object[] column = {"SUBJECTS", "FM", "PM",  "OM"};
        DefaultTableModel model = new DefaultTableModel();
        model.setColumnIdentifiers(column);
        tableMarks.setModel(model);
        String clas=(String)comboClass.getSelectedItem();
        String rollno=textRollno.getText();
        String year = textYear.getText();
        String name;
        float test = 0;
//        Object[] om1 = new Object[count];
//        Float[] integers = new Float[10];
//        Arrays.fill(integers, 0);
        ArrayList<Float> omlist1 = new ArrayList<>(7);
        ArrayList<Float> omlist2 = new ArrayList<>(5);
        ArrayList<Float> omlist3 = new ArrayList<>(5);
        ArrayList<Float> omlist4 = new ArrayList<>(5);
        ArrayList<Float> testlist = new ArrayList<>(5);
        ArrayList<String> sublist = new ArrayList<>(5);
        ArrayList<String> fmlist = new ArrayList<>(5);
        ArrayList<String> pmlist = new ArrayList<>(5);
        
        String term="1";
        ResultSet rs1, rs2, rs3, rs4, rs5, rs7;
        
        try
        {
            DBConnect.DBconnection roy = new DBconnection();
            Connection con = roy.getConnection();
            java.sql.PreparedStatement pstmt1, pstmt2, pstmt3, pstmt4, pstmt5, pstmt7;
            pstmt1 = con.prepareStatement("select om.SUBJECTS, subject.FULLMARKS, subject.PASSMARKS, om.OBTAINEDMARKS from om"
                    + " RIGHT JOIN subject on om.SUBJECTS=subject.SUBJECTS and om.CLASS=subject.CLASS"
                    + " WHERE om.CLASS='"+clas+"' and om.ROLLNO='"+rollno+"' and om.TERM='"+term+"' and om.YEAR='"+year+"' and subject.YEAR='"+year+"'");
            rs1 = pstmt1.executeQuery();
            int a=0;
            while(rs1.next())
            {
                omlist1.add(a, rs1.getFloat(4));       
                omlist2.add(test);
                omlist3.add(test);
                omlist4.add(test);
                sublist.add(rs1.getString(1));
                fmlist.add(rs1.getString(2));
                pmlist.add(rs1.getString(3));
                a++;
            }
//            for(Float n:omlist1)
//                System.out.println("First:"+n);
            term="2";
//          added subject.PASSMARKS, in the line below
            pstmt2 = con.prepareStatement("select om.SUBJECTS, subject.FULLMARKS, subject.PASSMARKS,om.OBTAINEDMARKS from om"
                    + " RIGHT JOIN subject on om.SUBJECTS=subject.SUBJECTS and om.CLASS=subject.CLASS"
                    + " WHERE om.CLASS='"+clas+"' and om.ROLLNO='"+rollno+"' and om.TERM='"+term+"' and om.YEAR='"+year+"' and subject.YEAR='"+year+"'");
            rs2 = pstmt2.executeQuery();
            int n=0;
            while(rs2.next())
            {
                //changed here
                //made same again
                pmlist.add(n,rs2.getString(3));
                
                omlist2.add(n, rs2.getFloat(4));              
                n++;
            }
            term="3";
            pstmt3 = con.prepareStatement("select om.SUBJECTS, subject.FULLMARKS, subject.PASSMARKS, om.OBTAINEDMARKS from om"
                    + " RIGHT JOIN subject on om.SUBJECTS=subject.SUBJECTS and om.CLASS=subject.CLASS"
                    + " WHERE om.CLASS='"+clas+"' and om.ROLLNO='"+rollno+"' and om.TERM='"+term+"' and om.YEAR='"+year+"' and subject.YEAR='"+year+"'");
            rs3 = pstmt3.executeQuery();
            n=0;
            while(rs3.next())
            {
                omlist3.add(n,rs3.getFloat(4));              
                pmlist.add(n,rs3.getString(3));
                n++;
            }
            term="4";
            pstmt4 = con.prepareStatement("select om.SUBJECTS, subject.FULLMARKS, subject.PASSMARKS,om.OBTAINEDMARKS from om"
                    + " RIGHT JOIN subject on om.SUBJECTS=subject.SUBJECTS and om.CLASS=subject.CLASS"
                    + " WHERE om.CLASS='"+clas+"' and om.ROLLNO='"+rollno+"' and om.TERM='"+term+"' and om.YEAR='"+year+"' and subject.YEAR='"+year+"'");
            rs4 = pstmt4.executeQuery();
            n=0;
            while(rs4.next())
            {
                pmlist.add(n,rs4.getString(3));
                omlist4.add(n,rs4.getFloat(4));              
                testlist.add(rs4.getFloat(3));
                n++;
            }
//            for(Float x: testlist)
//                System.out.println("Test: "+x);
            
//            need to set if the null value than corresponding floating value to 0
            
//            computation of total effective marks
            DecimalFormat df = new DecimalFormat("#.#");
            
            ArrayList<Float> totallist = new ArrayList<Float>(5);
            float totom=0;
            
            //System.out.println("First: "+omlist1.get(1).toString());
            Object[] row = new Object[4];
            for(int i=0;i<omlist1.size();i++)
            {
                totallist.add(omlist1.get(i)*ep1/100+omlist2.get(i)*ep2/100+omlist3.get(i)*ep3/100+omlist4.get(i)*ep4/100);
                //System.out.println(totallist+" jh");
                row[0]=sublist.get(i);
                row[1]=fmlist.get(i);
                row[2]=df.format(0.32*(Float.parseFloat(fmlist.get(i))));
//                row[3]=totallist.get(i);
                row[3]=df.format(totallist.get(i));
                
                model.addRow(row);
                totom=totom+totallist.get(i);
            }
            labelObtainedmarks.setText(""+df.format(totom));
            getPercent((String)comboClass.getSelectedItem());
            getAttendance((String)comboClass.getSelectedItem(),textRollno.getText(), (String)comboTermexam.getSelectedItem());
            labelClass.setText((String)comboClass.getSelectedItem());
            labelRollno.setText(textRollno.getText());
            
            pstmt7 = con.prepareStatement("SELECT STUDENTID FROM idclassroll WHERE CLASS='"+clas+"' AND ROLLNO='"+rollno+"' AND YEAR='"+year+"'");
            rs7 = pstmt7.executeQuery();
            while(rs7.next())            
            {
                textStudentid.setText(rs7.getString("STUDENTID"));
            }
            
            String stid = textStudentid.getText();
                        
            pstmt5 = con.prepareStatement("select NAME from studentdetails where STUDENTID='"+stid+"'");
            rs5 = pstmt5.executeQuery();
            while(rs5.next())
            {
                name = rs5.getString("NAME");
                labelName.setText(name);
            } 
            tableMarks.getColumnModel().getColumn(0).setPreferredWidth(120);
            tableMarks.getColumnModel().getColumn(1).setPreferredWidth(40);
            tableMarks.getColumnModel().getColumn(2).setPreferredWidth(40);
            tableMarks.getColumnModel().getColumn(3).setPreferredWidth(40);
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null, "Error: Mark-Sheet not found.\n"+e);
        }
    }
    /**
     * @param args the command line arguments
     */
    private void getFMandPercent(String clas,String rollno, String exam)
    {
        
        String totalmarks, fullmarks, year=textYear.getText();
        ResultSet rs=null, rs2=null;
        try
        {
            DBConnect.DBconnection roy = new DBconnection();
            Connection con = roy.getConnection();
            java.sql.PreparedStatement pstmt=null, pstmt2=null;
            pstmt = con.prepareStatement("SELECT sum(m.OBTAINEDMARKS) FROM om m WHERE m.CLASS = '"+clas+"' AND m.ROLLNO = '"+rollno+"' AND m.TERM='"+exam+"' AND m.YEAR='"+year+"'");
            rs = pstmt.executeQuery();
            while(rs.next())
            {
                totalmarks = rs.getString(1);
                labelObtainedmarks.setText(totalmarks);
            }
            pstmt2 = con.prepareStatement("SELECT SUM(FULLMARKS) FROM subject where CLASS='"+clas+"' AND YEAR='"+year+"'");
            rs2 = pstmt2.executeQuery();
            DecimalFormat df = new DecimalFormat("#.###");
            while(rs2.next())
            {
                fullmarks = rs2.getString(1);
                float per = Float.parseFloat(labelObtainedmarks.getText())/Float.parseFloat(fullmarks)*100;
                textPercentage.setText(df.format(per)+"");
            }
            if(Float.parseFloat(textPercentage.getText())>=90)
            {
                textGrade.setText("A+");
                textGPA.setText("4");
            }
            else if(Float.parseFloat(textPercentage.getText())>=80&&Float.parseFloat(textPercentage.getText())<90)
            {
                textGrade.setText("A");
                textGPA.setText("3.6");
            }
            else if(Float.parseFloat(textPercentage.getText())>=70&&Float.parseFloat(textPercentage.getText())<80)
            {
                textGrade.setText("B+");
                textGPA.setText("3.2");
            }
            else if(Float.parseFloat(textPercentage.getText())>=60&&Float.parseFloat(textPercentage.getText())<70)
            {
                textGrade.setText("B");
                textGPA.setText("2.8");
            }
            else if(Float.parseFloat(textPercentage.getText())>=50&&Float.parseFloat(textPercentage.getText())<60)
            {
                textGrade.setText("C+");
                textGPA.setText("2.4");
            }
            else if(Float.parseFloat(textPercentage.getText())>=40&&Float.parseFloat(textPercentage.getText())<50)
            {
                textGrade.setText("C");
                textGPA.setText("2.0");
            }
            else if(Float.parseFloat(textPercentage.getText())>=30&&Float.parseFloat(textPercentage.getText())<40)
            {
                textGrade.setText("D+");
                textGPA.setText("1.6");
                
            }
            else if(Float.parseFloat(textPercentage.getText())>=20&&Float.parseFloat(textPercentage.getText())<30)
            {
                textGrade.setText("D");
                textGPA.setText("1.2");
                
            }
            else if (Float.parseFloat(textPercentage.getText())>=0)
            {
                textGrade.setText("E");
                textGPA.setText("0.8");
            }
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null, "Error: Mark-Sheet not found.\n"+e);
        }
    }
    private void getPercent(String clas)
    {
        String year = textYear.getText();
        String fullmarks;
        ResultSet rs=null, rs2=null;
        try
        {
            DBConnect.DBconnection roy = new DBconnection();
            Connection con = roy.getConnection();
            java.sql.PreparedStatement pstmt2=null;
            DecimalFormat df = new DecimalFormat("#.###");
            
            pstmt2 = con.prepareStatement("SELECT SUM(FULLMARKS) FROM subject where CLASS='"+clas+"' and YEAR='"+year+"'");
            rs2 = pstmt2.executeQuery();
            while(rs2.next())
            {
                fullmarks = rs2.getString(1);
                float per = Float.parseFloat(labelObtainedmarks.getText())/Float.parseFloat(fullmarks)*100;
                textPercentage.setText(df.format(per)+"");
            }
            if(Float.parseFloat(textPercentage.getText())>=90)
            {
                textGrade.setText("A+");
                textGPA.setText("4");
            }
            else if(Float.parseFloat(textPercentage.getText())>=80)
            {
                textGrade.setText("A");
                textGPA.setText("3.6");
            }
            else if(Float.parseFloat(textPercentage.getText())>=70)
            {
                textGrade.setText("B+");
                textGPA.setText("3.2");
            }
            else if(Float.parseFloat(textPercentage.getText())>=60)
            {
                textGrade.setText("B");
                textGPA.setText("2.8");
            }
            else if(Float.parseFloat(textPercentage.getText())>=50)
            {
                textGrade.setText("C+");
                textGPA.setText("2.4");
            }
            else if(Float.parseFloat(textPercentage.getText())>=40)
            {
                textGrade.setText("C");
                textGPA.setText("2.0");
            }
            else if(Float.parseFloat(textPercentage.getText())>=30)
            {
                textGrade.setText("D+");
                textGPA.setText("1.6");
            }
            else if(Float.parseFloat(textPercentage.getText())>=20)
            {
                textGrade.setText("D");
                textGPA.setText("1.2");
            }
            else if (Float.parseFloat(textPercentage.getText())>=0)
            {
                textGrade.setText("E");
                textGPA.setText("0.8");
            }
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null, "Error: Mark-Sheet not found.\n"+e);
        }
    }
    private void getAttendance(String clas, String rollno, String exam)
    {
        String year=textYear.getText();
        if(null != (String)comboTermexam.getSelectedItem())
        switch ((String)comboTermexam.getSelectedItem()) {
            case "First Terminal Exam":
                exam = "1";
                break;
            case "Second Terminal Exam":
                exam= "2";
                break;
            case "Third Terminal Exam":
                exam= "3";
                break;
            default:
                exam= "4";
                break;
        }
        int attendance;
        ResultSet rs;
        try
        {
            DBConnect.DBconnection roy = new DBconnection();
            Connection con = roy.getConnection();
            java.sql.PreparedStatement pstmt;
            pstmt = con.prepareStatement("select sum(ATTENDANCE) FROM attendance "
                    + " WHERE CLASS='"+clas+"' and ROLLNO='"+rollno+"' and YEAR='"+year+"'");
            rs = pstmt.executeQuery();
            
            while(rs.next())
            {
                attendance = Integer.parseInt(rs.getString(1));
                textAttendance.setText(attendance+"/"+textTotalattendance.getText());
//                textAttendance.setText("");
            }
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null, "Error: Mark-Sheet not found.\n"+e);
        }
    }
    private void showMarksheet()
    {
        
        String clas=(String)comboClass.getSelectedItem();
        String rollno=textRollno.getText();
        String year = textYear.getText();
        String name;
        
        
        String exam=null;
        if(null != (String)comboTermexam.getSelectedItem())
        switch ((String)comboTermexam.getSelectedItem()) {
            case "First Terminal Exam":
                exam = "1";
                break;
            case "Second Terminal Exam":
                exam= "2";
                break;
            case "Third Terminal Exam":
                exam= "3";
                break;
            default:
                exam= "4";
                break;
        }
        String studentid=null;
        ResultSet rs;
        ResultSet rslt, rs3;
        try
        {
            DBConnect.DBconnection roy = new DBconnection();
            Connection con = roy.getConnection();
            java.sql.PreparedStatement pstmt, pstmt2, pstmt3;
            

            
            
            pstmt = con.prepareStatement("select om.SUBJECTS, subject.FULLMARKS, subject.PASSMARKS, om.OBTAINEDMARKS from om"
                    + " RIGHT JOIN subject on om.SUBJECTS=subject.SUBJECTS and om.CLASS=subject.CLASS"
                    + " WHERE om.CLASS='"+clas+"' and om.ROLLNO='"+rollno+"' and om.TERM='"+exam+"' and om.YEAR='"+year+"' and subject.YEAR='"+year+"'");
            rs = pstmt.executeQuery();
            tableMarks.setModel(DbUtils.resultSetToTableModel(rs));

            Object[] column = {"SUBJECTS", "FM", "PM",  "OM"};
            DefaultTableModel model = (DefaultTableModel) tableMarks.getModel();
            model.setColumnIdentifiers(column);
            tableMarks.setModel(model);
            
            //to get studentid
            pstmt3 = con.prepareStatement("SELECT STUDENTID FROM idclassroll WHERE CLASS='"+clas+"' and ROLLNO='"+rollno+"' AND YEAR='"+year+"'");
            rs3 = pstmt3.executeQuery();
            while(rs3.next())            
            {
                textStudentid.setText(rs3.getString("STUDENTID"));
            }
            
            //name on the basis of studentid
            String stid = textStudentid.getText();
            pstmt2 = con.prepareStatement("select NAME from studentdetails where STUDENTID='"+stid+"'");
            rslt = pstmt2.executeQuery();
            while(rslt.next())
            {
                name = rslt.getString("NAME");
                labelName.setText(name);
            } 
            
            
            tableMarks.getColumnModel().getColumn(0).setPreferredWidth(140);
            tableMarks.getColumnModel().getColumn(1).setPreferredWidth(40);
            tableMarks.getColumnModel().getColumn(2).setPreferredWidth(40);
            tableMarks.getColumnModel().getColumn(3).setPreferredWidth(40);
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null, "Mark-Sheet not found. \nCheck Roll No.\nError: "+e);
        }
    }
    private void fillComboClass()
    {
        String clas;
        ResultSet rs;
        try
        {
            DBConnect.DBconnection roy = new DBconnection();
            Connection con = roy.getConnection();
            java.sql.PreparedStatement pstmt;
            pstmt = con.prepareStatement("select * from class");
            rs = pstmt.executeQuery();
            while(rs.next())
            {
                clas = rs.getString("classes");
                comboClass.addItem(clas);
            }
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null, "Error: "+e);
        }
    }
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MarkSheet.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MarkSheet.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MarkSheet.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MarkSheet.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MarkSheet().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox checkboxShowresult;
    private javax.swing.JCheckBox checkboxShowresult1;
    private javax.swing.JComboBox comboClass;
    private javax.swing.JComboBox comboTermexam;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton12;
    private javax.swing.JButton jButton13;
    private javax.swing.JButton jButton14;
    private javax.swing.JButton jButton15;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel labelClass;
    private javax.swing.JLabel labelName;
    private javax.swing.JLabel labelObtainedmarks;
    private javax.swing.JLabel labelRollno;
    private javax.swing.JLabel labelTerm;
    private javax.swing.JPanel panelMarks;
    private javax.swing.JTable tableMarks;
    private javax.swing.JTextField textAttendance;
    private javax.swing.JTextField textFirstep;
    private javax.swing.JTextField textFourthep;
    private javax.swing.JTextField textGPA;
    private javax.swing.JTextField textGrade;
    private javax.swing.JTextField textNumberOfSt;
    private javax.swing.JTextField textPasspercentage;
    private javax.swing.JTextField textPercentage;
    private javax.swing.JTextField textPosition;
    private javax.swing.JTextField textResult;
    private javax.swing.JTextField textRollno;
    private javax.swing.JTextField textSecondep;
    private javax.swing.JTextField textStudentid;
    private javax.swing.JTextField textThirdep;
    private javax.swing.JTextField textTotalattendance;
    private javax.swing.JTextField textYear;
    // End of variables declaration//GEN-END:variables
}
