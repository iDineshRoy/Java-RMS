/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package schoolmanagement;

import DBConnect.DBconnection;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Dinesh
 */
public class MarkLedger extends javax.swing.JFrame {

    /**
     * Creates new form MarkLedger
     */
    public MarkLedger() {
        super("Mark-Ledger");
        initComponents();
        fillComboClass();
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        this.setLocation(dim.width/2-this.getSize().width/2, dim.height/2-this.getSize().height/2);
        textYear.setText("75");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        jPanel2 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        comboClass = new javax.swing.JComboBox();
        jButton1 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        textYear = new javax.swing.JTextField();
        comboTermexam = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        jButton4 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableMarkLedger = new javax.swing.JTable();
        jButton2 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel13 = new javax.swing.JLabel();
        textFirstep = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        textSecondep = new javax.swing.JTextField();
        textThirdep = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        textFourthep = new javax.swing.JTextField();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        textAplus = new javax.swing.JTextField();
        textA = new javax.swing.JTextField();
        textBplus = new javax.swing.JTextField();
        textB = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        textCplus = new javax.swing.JTextField();
        textC = new javax.swing.JTextField();
        textD = new javax.swing.JTextField();
        textE = new javax.swing.JTextField();
        jButton3 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Mark-Ledger For"));

        jLabel1.setText("Class:");

        comboClass.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboClassItemStateChanged(evt);
            }
        });

        jButton1.setText("Show");

        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, textFirstep, org.jdesktop.beansbinding.ObjectProperty.create(), jButton1, org.jdesktop.beansbinding.BeanProperty.create("nextFocusableComponent"));
        bindingGroup.addBinding(binding);

        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel2.setText("Year:");

        jLabel3.setText("20");

        comboTermexam.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "First Terminal Exam", "Second Terminal Exam", "Third Terminal Exam", "Fourth Terminal Exam" }));

        jLabel4.setText("Terminal Exam:");

        jButton4.setText("Refresh Positions");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)
                            .addComponent(jLabel4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(comboTermexam, 0, 1, Short.MAX_VALUE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(textYear))
                            .addComponent(comboClass, 0, 119, Short.MAX_VALUE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jButton4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton1)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(textYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(comboClass, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(comboTermexam, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton4))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        tableMarkLedger.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(tableMarkLedger);

        jButton2.setText("Export to Excel");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Combined Mark-Ledger"));

        jLabel13.setText("FTEP");

        textFirstep.setText("0");

        jLabel14.setText("STEP");

        textSecondep.setText("0");

        textThirdep.setText("0");

        jLabel15.setText("TTEP");

        jLabel16.setText("FTEP");

        textFourthep.setText("0");

        jButton5.setText("Show");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton6.setText("Refresh Positions");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel13)
                            .addComponent(jLabel15))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(textThirdep, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
                                .addComponent(jLabel16))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(textFirstep, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel14)))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(textSecondep, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(textFourthep, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addComponent(jButton6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton5)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(textFirstep, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel14)
                    .addComponent(textSecondep, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel15)
                    .addComponent(textThirdep, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel16)
                    .addComponent(textFourthep, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton5)
                    .addComponent(jButton6))
                .addContainerGap())
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Grading Category"));

        jLabel5.setText("A+");

        jLabel6.setText("A");

        jLabel7.setText("B+");

        jLabel8.setText("B");

        jLabel9.setText("C+");

        jLabel10.setText("C");

        jLabel11.setText("D");

        jLabel12.setText("E");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(textAplus, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addGap(18, 18, 18)
                        .addComponent(textA, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(textBplus, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addGap(18, 18, 18)
                        .addComponent(textB, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel12)
                        .addGap(18, 18, 18)
                        .addComponent(textE, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel11)
                        .addGap(18, 18, 18)
                        .addComponent(textD, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel10)
                        .addGap(18, 18, 18)
                        .addComponent(textC, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(textCplus, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(14, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(textAplus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9)
                    .addComponent(textCplus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(textA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10)
                    .addComponent(textC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(textBplus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11)
                    .addComponent(textD, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(textB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12)
                    .addComponent(textE, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(21, Short.MAX_VALUE))
        );

        jButton3.setText("Open Mark-Sheet");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jButton3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 17, Short.MAX_VALUE)
                        .addComponent(jButton2))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 662, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton2)
                            .addComponent(jButton3))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(16, Short.MAX_VALUE))
        );

        bindingGroup.bind();

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void comboClassItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboClassItemStateChanged
        // TODO add your handling code here:

        if(evt.getStateChange()==java.awt.event.ItemEvent.SELECTED)
        {
            String clas = (String) evt.getItem();
            //show next rollno
//            textRollno.setText("");
//            showNextRollNo(clas);
        }
    }//GEN-LAST:event_comboClassItemStateChanged

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        
        showMarkLedger();
        computeFullMarks();
        showAttendance();
        showPercentage();
        showPosition();
        showGrade();
        gradeDivision();
        int x = tableMarkLedger.getColumnCount();
        tableMarkLedger.getColumnModel().getColumn(x-5).setPreferredWidth(50);
        tableMarkLedger.getColumnModel().getColumn(x-4).setPreferredWidth(50);
        tableMarkLedger.getColumnModel().getColumn(x-3).setPreferredWidth(30);
        tableMarkLedger.getColumnModel().getColumn(x-2).setPreferredWidth(30);
        tableMarkLedger.getColumnModel().getColumn(x-2).setPreferredWidth(30);
        tableMarkLedger.getColumnModel().getColumn(x-1).setPreferredWidth(30);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void gradeDivision()
    {
        textAplus.setText("0");
        textA.setText("0");
        textBplus.setText("0");
        textB.setText("0");
        textCplus.setText("0");
        textC.setText("0");
        textD.setText("0");
        textE.setText("0");
        
        
        try
        {
            int rows = tableMarkLedger.getRowCount();
            int column = tableMarkLedger.getColumnCount();
                                   
            for(int i=0;i<rows;i++)
            {
                String grade = (String)tableMarkLedger.getModel().getValueAt(i, column-3);
                if(grade.equals("A+"))
                {
                    int g=Integer.parseInt(textAplus.getText());
                    g++;
                    textAplus.setText(g+"");
                }
                else if(grade.equals("A"))
                {
                    int g=Integer.parseInt(textA.getText());
                    g++;
                    textA.setText(g+"");
                }
                else if(grade.equals("B+"))
                {
                    int g=Integer.parseInt(textBplus.getText());
                    g++;
                    textBplus.setText(g+"");
                }
                else if(grade.equals("B"))
                {
                    int g=Integer.parseInt(textB.getText());
                    g++;
                    textB.setText(g+"");
                }
                else if(grade.equals("C+"))
                {
                    int g=Integer.parseInt(textCplus.getText());
                    g++;
                    textCplus.setText(g+"");
                }
                else if(grade.equals("C"))
                {
                    int g=Integer.parseInt(textC.getText());
                    g++;
                    textC.setText(g+"");
                }
                else if(grade.equals("D"))
                {
                    int g=Integer.parseInt(textD.getText());
                    g++;
                    textD.setText(g+"");
                }
                else if(grade.equals("E"))
                {
                    int g=Integer.parseInt(textE.getText());
                    g++;
                    textE.setText(g+"");
                }
            }
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null, "Error:"+e);
        }
    }
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        try
        {
//            Path path = Paths.get("C:\\SMS\\");
//            writeToExcell(tableStudentsDetails, path);
            String file = "C:\\SMS\\Mark-Ledger "+comboClass.getSelectedItem().toString()+".xls";
            File f = new File(file);
            exportTable(tableMarkLedger, f);
            JOptionPane.showMessageDialog(null, "Exported successfully!");
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null, "Error: "+e);
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        MarkSheet roy = new MarkSheet();
        roy.setVisible(true);
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        String term = getTerm((String) comboTermexam.getSelectedItem());
        beforeCalculatingPositionForSpecificTerm(term);

        showPosition();
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        if((Float.parseFloat(textFirstep.getText())+Float.parseFloat(textSecondep.getText())+Float.parseFloat(textThirdep.getText())+Float.parseFloat(textFourthep.getText()))==100)
        {
            showMarkLedger();
            showCombinedMarkLedger();
            computeFullMarks();
            showAttendance();
            showPercentage();
            showPosition();
            showGrade();
            gradeDivision();
            int x = tableMarkLedger.getColumnCount();
            tableMarkLedger.getColumnModel().getColumn(x-5).setPreferredWidth(50);
            tableMarkLedger.getColumnModel().getColumn(x-4).setPreferredWidth(50);
            tableMarkLedger.getColumnModel().getColumn(x-3).setPreferredWidth(30);
            tableMarkLedger.getColumnModel().getColumn(x-2).setPreferredWidth(30);
            tableMarkLedger.getColumnModel().getColumn(x-2).setPreferredWidth(30);
            tableMarkLedger.getColumnModel().getColumn(x-1).setPreferredWidth(30);
        }
        else
        {
            JOptionPane.showMessageDialog(this, "The effective percentages' sum must be equal to 100.\nPlease re-check & enter.\n\nNote:* Don't leave the textboxes empty.");
        }
    }//GEN-LAST:event_jButton5ActionPerformed

    private void showCombinedAttendance()
    {
        try
        {
            

            DBConnect.DBconnection roy = new DBconnection();
            Connection con = roy.getConnection();
            java.sql.PreparedStatement pstmt=null, pstmt2=null, pstmt3=null, pstmt4=null;
            String clas = comboClass.getSelectedItem().toString();
            String year = "20"+textYear.getText();
            
            ArrayList<Integer> atten = new ArrayList<Integer>(5);
            String term = "1";
            
            ResultSet rs=null, rs2=null, rs3=null, rs4=null;
            pstmt = con.prepareStatement("SELECT ATTENDANCE from  attendance"
                    + " WHERE attendance.CLASS= '"+clas+"' AND attendance.YEAR='"+year+"' AND attendance.TERM='"+term+"' "
                    + " ORDER BY attendance.ROLLNO ASC");
            rs = pstmt.executeQuery();
            int rows = tableMarkLedger.getRowCount();
            int column = tableMarkLedger.getColumnCount();
            int i=0;
            while(rs.next()&& i!=rows)
            {
                tableMarkLedger.getModel().setValueAt((Object)(rs.getInt("ATTENDANCE")), i,column-1);
//                tableMarkLedger.getModel().setValueAt((Object)(rs.getInt("ATTENDANCE")+rs2.getInt("ATTENDANCE")+rs3.getInt("ATTENDANCE")+rs4.getInt("ATTENDANCE")), i,column-1);
                
                i++;
            }
            i=0;
            term="2";
            pstmt2 = con.prepareStatement("SELECT ATTENDANCE from  attendance"
                    + " WHERE attendance.CLASS= '"+clas+"' AND attendance.YEAR='"+year+"' AND attendance.TERM='"+term+"' "
                    + " ORDER BY attendance.ROLLNO ASC");
            rs2 = pstmt2.executeQuery();
            while(rs2.next() && i!=rows)
            {
                tableMarkLedger.getModel().setValueAt((Object)(rs2.getInt("ATTENDANCE")+(Integer)tableMarkLedger.getModel().getValueAt(i,column-1)), i,column-1);
                i++;
            }
            
            
            i=0;
            term="3";
            pstmt3 = con.prepareStatement("SELECT ATTENDANCE from  attendance"
                    + " WHERE attendance.CLASS= '"+clas+"' AND attendance.YEAR='"+year+"' AND attendance.TERM='"+term+"' "
                    + " ORDER BY attendance.ROLLNO ASC");
            rs3 = pstmt3.executeQuery();
            while(rs3.next() && i!=rows)
            {
                tableMarkLedger.getModel().setValueAt((Object)(rs3.getInt("ATTENDANCE")+(Integer)tableMarkLedger.getModel().getValueAt(i,column-1)), i,column-1);
                i++;
            }
            
            i=0;
            term = "4";
            pstmt4 = con.prepareStatement("SELECT ATTENDANCE from  attendance"
                    + " WHERE attendance.CLASS= '"+clas+"' AND attendance.YEAR='"+year+"' AND attendance.TERM='"+term+"' "
                    + " ORDER BY attendance.ROLLNO ASC");
            rs4 = pstmt4.executeQuery();
            while(rs4.next() && i!=rows)
            {
                tableMarkLedger.getModel().setValueAt((Object)(rs4.getInt("ATTENDANCE")+(Integer)tableMarkLedger.getModel().getValueAt(i,column-1)), i,column-1);
                i++;
            }
            
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null, "Error:"+e);
        }        
    }
    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        try {
            // TODO add your handling code here:
            computeLedgerPositions();
            showCombinedAttendance();
            showPosition();
        } catch (SQLException ex) {
            Logger.getLogger(MarkLedger.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton6ActionPerformed

    private void computeLedgerPositions() throws SQLException
    {
        int rows=tableMarkLedger.getRowCount();
        int column=tableMarkLedger.getColumnCount();
        
        ArrayList<Integer> studentid = new ArrayList<Integer>(5);
        ArrayList<Float> totallist = new ArrayList<Float>(5);
        int j=column-5;//column of total marks
        
        String clas = comboClass.getSelectedItem().toString();
        String year = "20"+textYear.getText();
        
        DBConnect.DBconnection roy = new DBconnection();
        Connection con = roy.getConnection();
        java.sql.PreparedStatement pstmt=null, pstmt3;
        java.sql.ResultSet rs;
        
        pstmt3 = con.prepareStatement("DELETE FROM temporary WHERE 1");
        pstmt3.executeUpdate();
            
        pstmt = con.prepareStatement("SELECT studentdetails.NAME, studentdetails.STUDENTID, idclassroll.ROLLNO from  studentdetails "
                + "inner join idclassroll "
                + "ON idclassroll.STUDENTID=studentdetails.STUDENTID "
                + "WHERE idclassroll.CLASS= '"+clas+"' AND idclassroll.YEAR='"+year+"' ORDER BY idclassroll.ROLLNO ASC");
        rs = pstmt.executeQuery();
        while(rs.next())
        {
            
            studentid.add(rs.getInt("STUDENTID"));
            
        }
        
        
        for(int i=0;i<rows;i++)
        {
            
            if(tableMarkLedger.getModel().getValueAt(i, j)==null)
            {
                JOptionPane.showMessageDialog(this, "Can't calculate the position!");
            }
            else
            {
                //om=(Float)tableMarkLedger.getModel().getValueAt(i, j);
                totallist.add((Float)(tableMarkLedger.getModel().getValueAt(i, j)));
            }
            
            //System.out.println(totallist+"\n");
            
            int a=i+1;
            java.sql.PreparedStatement pstmt2=con.prepareStatement("INSERT INTO temporary values ('"+studentid.get(i)+"','"+totallist.get(i)+"', '"+a+"' )");
            
            pstmt2.executeUpdate();
            
//            float totom=0;
//            for(int i=0;i<size;i++)
//            {
//                totallist.add(omlist1.get(i));
//
//                totom=totom+totallist.get(i);
//                //System.out.println(totom+"\n");
//            }
            
        }
        
    }
    private void showGrade()
    {
        try
        {
            DBConnect.DBconnection roy = new DBconnection();
            Connection con = roy.getConnection();
            java.sql.PreparedStatement pstmt=null;
            String clas = comboClass.getSelectedItem().toString();
            String year = "20"+textYear.getText();
            
            int rows = tableMarkLedger.getRowCount();
            int column = tableMarkLedger.getColumnCount();
            
            float fm=0;
            
            for(int i=0;i<rows;i++)
            {
                Float per = (Float)tableMarkLedger.getModel().getValueAt(i, column-4);
                String grade=computeGrade(per);
                tableMarkLedger.getModel().setValueAt((Object)grade, i, column-3);
            }
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null, "Error:"+e);
        }
    }
    private String computeGrade(Float per)
    {
        String grade=null;
        if(per>=90)
        {
            grade= "A+";

        }
        else if(per>=80&&per<90)
        {
            grade= "A";
        }
        else if(per>=70&&per<80)
        {
            grade= "B+";
        }
        else if(per>=60&&per<70)
        {
            grade= "B";
        }
        else if(per>=50&&per<60)
        {
            grade= "C+";
        }
        else if(per>=40&&per<50)
        {
            grade= "C";
        }
        else if(per>=30&&per<40)
        {
            grade= "D+";
        }
        else if(per>=20&&per<30)
        {
            grade= "D";
        }
        else
        {
            grade= "E";
        }
        return grade;
    }
    private void showPosition()
    {
        int rows=tableMarkLedger.getRowCount();
        int column=tableMarkLedger.getColumnCount();
        
        ResultSet rs5;
        java.sql.PreparedStatement pstmt5;
        
        
        for(int i=0;i<rows;i++)
        {

            try {
                DBConnect.DBconnection roy = new DBconnection();
                Connection con = roy.getConnection();

                int id = (Integer) tableMarkLedger.getModel().getValueAt(i,0);
                pstmt5 = con.prepareStatement("select 1 + count(*) from temporary "
                        + " where temporary.TOTALOM > (select t2.TOTALOM from temporary t2 where t2.INDEX = '" + id + "');");
                rs5 = pstmt5.executeQuery();

                int k = 0;
                while (rs5.next()) {
                    tableMarkLedger.getModel().setValueAt((Object) rs5.getInt(1), i, column - 2);
                    k++;
                }
            } catch (Exception e) {

            }
            //totom = totom + om;
//                System.out.println(totom+"\n");
//                tableMarkLedger.getModel().setValueAt(9842, 3, 3);
            //tableMarkLedger.getModel().setValueAt((Object) totom, i, column - 4);


            //totom=0;
        }
        
        //String id = (String)tableMarkLedger.getModel().getValueAt(WIDTH, WIDTH);
        
        
    }
    private void beforeCalculatingPositionForSpecificTerm(String term)
    {
        String clas=(String) comboClass.getSelectedItem();
        String year = "20"+textYear.getText();
        ArrayList<Integer> studentid = new ArrayList<>(7);
        ArrayList<Float> omlist1 = new ArrayList<>(7);
        ArrayList<Float> omlist2 = new ArrayList<>(5);
        ArrayList<Float> omlist3 = new ArrayList<>(5);
        ArrayList<Float> omlist4 = new ArrayList<>(5);
        float test=0;
        
        ResultSet rs1, rs2, rs3, rs4, rs5, rs7, rs9, rssub;
        
        try
        {
            
            DBConnect.DBconnection roy = new DBconnection();
            Connection con = roy.getConnection();
            java.sql.PreparedStatement pstmt1, pstmt5, pstmt8, pstmt9;
            
            //get studentid then run a loop for all ids
            pstmt8 = con.prepareStatement("DELETE FROM temporary WHERE 1");
            pstmt8.executeUpdate();
            
            
            pstmt9 = con.prepareStatement("select STUDENTID from idclassroll"
                    + " where CLASS='"+clas+"' AND YEAR='"+year+"' order by ROLLNO ASC");
            rs9 = pstmt9.executeQuery();
            while(rs9.next())
            {
                studentid.add(rs9.getInt("STUDENTID"));
            }
            
            
            for(int j=0;j<studentid.size();j++)
            {
                pstmt1 = con.prepareStatement("select om.SUBJECTS, subject.FULLMARKS, subject.PASSMARKS, om.OBTAINEDMARKS from om"
                        + " RIGHT JOIN subject on om.SUBJECTS=subject.SUBJECTS and om.CLASS=subject.CLASS"
                        + " WHERE om.CLASS='"+clas+"' and om.STUDENTID='"+studentid.get(j)+"' and om.TERM='"+term+"' and om.YEAR='"+year+"' and subject.YEAR='"+year+"'");
                rs1 = pstmt1.executeQuery();
                while(rs1.next())
                {
                    omlist1.add(rs1.getFloat(4));       
                    omlist2.add(test);
                    omlist3.add(test);
                    omlist4.add(test);
                }
                //done for the number of subjects
                //this may create a huge error
                //when the marks for first term is not added then the size will be zero and the error will be produced
                int size = omlist1.size();
    //            for(Float n:omlist1)
    //                System.out.println("First:"+n);
                //System.out.println(size);
                
                DecimalFormat df = new DecimalFormat("#.#");

                ArrayList<Float> totallist = new ArrayList<Float>(5);
                float totom=0;
                for(int i=0;i<size;i++)
                {
                    totallist.add(omlist1.get(i));
                    
                    totom=totom+totallist.get(i);
                    //System.out.println(totom+"\n");
                }
                pstmt5=con.prepareStatement("INSERT INTO temporary values ('"+studentid.get(j)+"','"+totom+"', '"+(j+1)+"' )");
                pstmt5.executeUpdate();
                totallist.removeAll(totallist);
                omlist1.removeAll(omlist1);
                omlist2.removeAll(omlist2);
                omlist3.removeAll(omlist3);
                omlist4.removeAll(omlist4);
                
            }
            
//            for(Float x: testlist)
//                System.out.println("Test: "+x);
            
//            need to set if the null value than corresponding floating value to 0
            
//            computation of total effective marks
            
            
            
            //String stid = textStudentid.getText();
             
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null, "Error: "+e);
        }
        
    }
    private void beforeCalculatingPositionForCombinedMS(int ep1, int ep2, int ep3, int ep4)
    {
        
        String clas=(String) comboClass.getSelectedItem();
        String year = "20"+textYear.getText();
        ArrayList<Integer> studentid = new ArrayList<>(7);
        ArrayList<Float> omlist1 = new ArrayList<>(7);
        ArrayList<Float> omlist2 = new ArrayList<>(5);
        ArrayList<Float> omlist3 = new ArrayList<>(5);
        ArrayList<Float> omlist4 = new ArrayList<>(5);
        ArrayList<Float> testlist = new ArrayList<>(5);
        ArrayList<String> sublist = new ArrayList<>(5);
        ArrayList<String> fmlist = new ArrayList<>(5);
        ArrayList<String> pmlist = new ArrayList<>(5);
        float test=0;
        
        ResultSet rs1, rs2, rs3, rs4, rs5, rs7, rs9, rssub;
        
        try
        {
            
            DBConnect.DBconnection roy = new DBconnection();
            Connection con = roy.getConnection();
            java.sql.PreparedStatement pstmt1, pstmt2, pstmt3, pstmt4, pstmt5, pstmt7, pstmt8, pstmt9, pstmtsub;
            
            //get studentid then run a loop for all ids
            pstmt8 = con.prepareStatement("DELETE FROM temporary WHERE 1");
            pstmt8.executeUpdate();
            
            
            pstmt9 = con.prepareStatement("select STUDENTID from idclassroll"
                    + " where CLASS='"+clas+"' AND YEAR='"+year+"' order by ROLLNO ASC");
            rs9 = pstmt9.executeQuery();
            while(rs9.next())
            {
                studentid.add(rs9.getInt("STUDENTID"));
            }
            
            
            for(int j=0;j<studentid.size();j++)
            {
                String term="1";
                pstmt1 = con.prepareStatement("select om.SUBJECTS, subject.FULLMARKS, subject.PASSMARKS, om.OBTAINEDMARKS from om"
                        + " RIGHT JOIN subject on om.SUBJECTS=subject.SUBJECTS and om.CLASS=subject.CLASS"
                        + " WHERE om.CLASS='"+clas+"' and om.STUDENTID='"+studentid.get(j)+"' and om.TERM='"+term+"' and om.YEAR='"+year+"' and subject.YEAR='"+year+"'");
                rs1 = pstmt1.executeQuery();
                while(rs1.next())
                {
                    omlist1.add(rs1.getFloat(4));       
                    omlist2.add(test);
                    omlist3.add(test);
                    omlist4.add(test);
                    sublist.add(rs1.getString(1));
                    fmlist.add(rs1.getString(2));
                    pmlist.add(rs1.getString(3));
                }
                //done for the number of subjects
                //this may create a huge error
                //when the marks for first term is not added then the size will be zero and the error will be produced
                //int size = omlist1.size();
    //            for(Float n:omlist1)
    //                System.out.println("First:"+n);
                term="2";
                pstmt2 = con.prepareStatement("select om.SUBJECTS, subject.FULLMARKS, om.OBTAINEDMARKS from om"
                        + " RIGHT JOIN subject on om.SUBJECTS=subject.SUBJECTS and om.CLASS=subject.CLASS"
                        + " WHERE om.CLASS='"+clas+"' and om.STUDENTID='"+studentid.get(j)+"' and om.TERM='"+term+"' and om.YEAR='"+year+"'");
                rs2 = pstmt2.executeQuery();
                int n=0;
                while(rs2.next())
                {
                    omlist2.add(n, rs2.getFloat(3));    
                    //System.out.println(omlist2.get(n)+"\n");
                    n++;
                }
                int size = omlist1.size();
                term="3";
                pstmt3 = con.prepareStatement("select om.SUBJECTS, subject.FULLMARKS, om.OBTAINEDMARKS from om"
                        + " RIGHT JOIN subject on om.SUBJECTS=subject.SUBJECTS and om.CLASS=subject.CLASS"
                        + " WHERE om.CLASS='"+clas+"' and om.STUDENTID='"+studentid.get(j)+"' and om.TERM='"+term+"' and om.YEAR='"+year+"'");
                rs3 = pstmt3.executeQuery();
                n=0;
                while(rs3.next())
                {
                    omlist3.add(n,rs3.getFloat(3));              
                    n++;
                }
                term="4";
                pstmt4 = con.prepareStatement("select om.SUBJECTS, subject.FULLMARKS, om.OBTAINEDMARKS from om"
                        + " RIGHT JOIN subject on om.SUBJECTS=subject.SUBJECTS and om.CLASS=subject.CLASS"
                        + " WHERE om.CLASS='"+clas+"' and om.STUDENTID='"+studentid.get(j)+"' and om.TERM='"+term+"' and om.YEAR='"+year+"'");
                rs4 = pstmt4.executeQuery();
                n=0;
                while(rs4.next())
                {
                    omlist4.add(n,rs4.getFloat(3));              
                    testlist.add(rs4.getFloat(3));
                    n++;
                }
                
                pstmtsub = con.prepareStatement("select count(SUBJECTS) from subject where YEAR='"+year+"' and CLASS='"+clas+"'");
                rssub = pstmtsub.executeQuery();
                while(rssub.next())
                {
                    size=rssub.getInt(1);
                    System.out.println(size);
                }
                System.out.println(size);
                
                DecimalFormat df = new DecimalFormat("#.#");

                ArrayList<Float> totallist = new ArrayList<Float>(5);
                float totom=0;
                for(int i=0;i<size;i++)
                {
                    totallist.add(omlist1.get(i)*ep1/100+omlist2.get(i)*ep2/100+omlist3.get(i)*ep3/100+omlist4.get(i)*ep4/100);
                    
                    totom=totom+totallist.get(i);
                    System.out.println(totom+"\n");
                }
                pstmt5=con.prepareStatement("INSERT INTO temporary values ('"+studentid.get(j)+"','"+totom+"', '"+(j+1)+"' )");
                pstmt5.executeUpdate();
                totallist.removeAll(totallist);
                omlist1.removeAll(omlist1);
                omlist2.removeAll(omlist2);
                omlist3.removeAll(omlist3);
                omlist4.removeAll(omlist4);
                
            }
            
//            for(Float x: testlist)
//                System.out.println("Test: "+x);
            
//            need to set if the null value than corresponding floating value to 0
            
//            computation of total effective marks
            
            
            
            //String stid = textStudentid.getText();
             
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null, "Error: "+e);
        }
                    
    }
    public void exportTable(JTable table, File file) throws IOException {
        DefaultTableModel model = (DefaultTableModel) table.getModel();
        FileWriter out = new FileWriter(file);
        String groupExport = "";
        for (int i = 0; i < (model.getColumnCount()); i++) {//* disable export from TableHeaders
            groupExport = String.valueOf(model.getColumnName(i));
            out.write(String.valueOf(groupExport) + "\t");
        }
        out.write("\n");
        for (int i = 0; i < model.getRowCount(); i++) {
            for (int j = 0; j < (model.getColumnCount()); j++) {
                if (model.getValueAt(i, j) == null) {
                    out.write("null" + "\t");
                } else {
                    groupExport = String.valueOf(model.getValueAt(i, j));
                    out.write(String.valueOf(groupExport) + "\t");
                }
            }
            out.write("\n");
        }
        out.close();
    }
    public void showPercentage()
    {
        try
        {
            

            DBConnect.DBconnection roy = new DBconnection();
            Connection con = roy.getConnection();
            java.sql.PreparedStatement pstmt=null;
            String clas = comboClass.getSelectedItem().toString();
            String year = "20"+textYear.getText();
            String term = getTerm(comboTermexam.getSelectedItem().toString());
            ResultSet rs=null;
            pstmt = con.prepareStatement("SELECT SUM(FULLMARKS) from  subject"
                    + " WHERE subject.CLASS= '"+clas+"' AND subject.YEAR='"+year+"'");
            rs = pstmt.executeQuery();
            int rows = tableMarkLedger.getRowCount();
            int column = tableMarkLedger.getColumnCount();
            
            float fm=0;
            while(rs.next())
            {
                fm=rs.getInt(1);
            }
            for(int i=0;i<rows;i++)
            {
                for(int j=0;j<column-4;j++)
                {
                    tableMarkLedger.getModel().setValueAt((Object)((Float)tableMarkLedger.getModel().getValueAt(i, column-5)*100/fm), i, column-4);
                }
            }
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null, "Error:"+e);
        }
    }
    public void showAttendance()
    {
        try
        {
            

            DBConnect.DBconnection roy = new DBconnection();
            Connection con = roy.getConnection();
            java.sql.PreparedStatement pstmt=null;
            String clas = comboClass.getSelectedItem().toString();
            String year = "20"+textYear.getText();
            String term = getTerm(comboTermexam.getSelectedItem().toString());
            ResultSet rs=null;
            pstmt = con.prepareStatement("SELECT ATTENDANCE from  attendance"
                    + " WHERE attendance.CLASS= '"+clas+"' AND attendance.YEAR='"+year+"' AND attendance.TERM='"+term+"' "
                    + " ORDER BY attendance.ROLLNO ASC");
            rs = pstmt.executeQuery();
            int rows = tableMarkLedger.getRowCount();
            int column = tableMarkLedger.getColumnCount();
            int i=0;
            while(rs.next()&& i!=rows)
            {
                tableMarkLedger.getModel().setValueAt((Object)rs.getInt("ATTENDANCE"), i,column-1);
                i++;
            }
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null, "Error:"+e);
        }
    }
    public void computeFullMarks()
    {
        
        int rows=tableMarkLedger.getRowCount();
        int column=tableMarkLedger.getColumnCount();
        float totom=0;
        
        float om=0;
        for(int i=0;i<rows;i++)
        {
            for(int j=2;j<column-5;j++)
            {
                if(tableMarkLedger.getModel().getValueAt(i, j)==null)
                {
                    om=0;
                }
                else
                {
//                    om=(Float)tableMarkLedger.getModel().getValueAt(i, j);
                    
                    om=Float.parseFloat((String) tableMarkLedger.getModel().getValueAt(i, j));
                }
                totom=totom+om;
//                System.out.println(totom+"\n");
//                tableMarkLedger.getModel().setValueAt(9842, 3, 3);
                tableMarkLedger.getModel().setValueAt((Object)totom,i,column-5);
                
            }
            totom=0;
        }
    }
    public void showMarkLedger()
    {
        //Object[] column = {"Name", "FULLMARKS", "PASSMARKS",  "OBTAINEDMARKS"};
        ArrayList<String> name = new ArrayList<String>(5);
        
        
        DefaultTableModel model = new DefaultTableModel();
//        model.setColumnIdentifiers(name.toArray());
//        tableMarkLedger.setModel(model);
        
        //Names
        ArrayList<String> names = new ArrayList<String>(5);
        ArrayList<String> subjects = new ArrayList<String>(5);
        ArrayList<Float> om = new ArrayList<Float>(5);
        ArrayList<Integer> studentid = new ArrayList<Integer>(5);
        ArrayList<Integer> rollno = new ArrayList<Integer>(5);
        
        String clas = comboClass.getSelectedItem().toString();
        String year = "20"+textYear.getText();
        String term = getTerm(comboTermexam.getSelectedItem().toString());
        ResultSet rs=null, rs2=null;
        try
        {
            DBConnect.DBconnection roy = new DBconnection();
            Connection con = roy.getConnection();
            java.sql.PreparedStatement pstmt=null, pstmt2=null;
            pstmt = con.prepareStatement("SELECT studentdetails.NAME, studentdetails.STUDENTID, idclassroll.ROLLNO from  studentdetails "
                    + "inner join idclassroll "
                    + "ON idclassroll.STUDENTID=studentdetails.STUDENTID "
                    + "WHERE idclassroll.CLASS= '"+clas+"' AND idclassroll.YEAR='"+year+"' ORDER BY idclassroll.ROLLNO ASC");
            rs = pstmt.executeQuery();
            while(rs.next())
            {
                names.add(rs.getString("NAME"));
                studentid.add(rs.getInt("STUDENTID"));
                rollno.add(rs.getInt("ROLLNO"));
            }
            pstmt2 = con.prepareStatement("select SUBJECTS FROM subject where CLASS='"+clas+"' AND YEAR='"+year+"'");
            rs2 = pstmt2.executeQuery();
            
            //adding name for the header of the first column
            //subjects arrylist will act as a header
            subjects.add("ROLLNO");
            subjects.add("NAME");
            while(rs2.next())
            {
                subjects.add(rs2.getString("SUBJECTS"));
            }
            subjects.add("TotalOM");
            subjects.add("Percentage");
            subjects.add("Grade");
            subjects.add("Position");
            subjects.add("Attendance");
            model.setColumnIdentifiers(subjects.toArray());
            tableMarkLedger.setModel(model);
            
            
            //adding to table rows
            for(int i=0;i<names.size();i++)
            {
                model.addRow(new Object[]{rollno.get(i),names.get(i)});
            }
            
            
            
            //now for each studentid draw obtained marks to om arraylist
            DecimalFormat df = new DecimalFormat("#.##");
            for(int j=2;j<subjects.size()-1;j++)
            {
                for(int k=0;k<names.size();k++)
                {
                    pstmt = con.prepareStatement("SELECT OBTAINEDMARKS from  om"
                            + " WHERE om.CLASS= '"+clas+"' AND om.YEAR='"+year+"' AND om.SUBJECTS='"+subjects.get(j)+"' AND om.STUDENTID='"+studentid.get(k)+"' AND om.TERM='"+term+"'");
                    rs = pstmt.executeQuery();
                    while(rs.next())
                    {
                        //model.setValueAt((Object)rs.getFloat("OBTAINEDMARKS"), k,j);
                        model.setValueAt((Object)df.format(rs.getFloat("OBTAINEDMARKS")), k,j);
                    }
                }
            }
            
            tableMarkLedger.getColumnModel().getColumn(0).setPreferredWidth(35);
            tableMarkLedger.getColumnModel().getColumn(1).setPreferredWidth(140);
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null, "Error:"+e);
        }
    }
    public void showCombinedMarkLedger()
    {
        //Object[] column = {"Name", "FULLMARKS", "PASSMARKS",  "OBTAINEDMARKS"};
        
        
        
        DefaultTableModel model = new DefaultTableModel();
//        model.setColumnIdentifiers(name.toArray());
//        tableMarkLedger.setModel(model);
        
        //Names
        ArrayList<String> names = new ArrayList<>(5);
        ArrayList<String> subjects = new ArrayList<>(5);
        ArrayList<Float> om = new ArrayList<>(5);
        ArrayList<Integer> studentid = new ArrayList<>(5);
        ArrayList<Integer> rollno = new ArrayList<>(5);
        
        String clas = comboClass.getSelectedItem().toString();
        String year = "20"+textYear.getText();
        String term=null;
        ResultSet rs=null, rs2=null, rs3=null, rs4=null;
        try
        {
            DBConnect.DBconnection roy = new DBconnection();
            Connection con = roy.getConnection();
            java.sql.PreparedStatement pstmt=null, pstmt2=null, pstmt3=null, pstmt4=null;
            
            pstmt = con.prepareStatement("SELECT studentdetails.NAME, studentdetails.STUDENTID, idclassroll.ROLLNO from  studentdetails "
                    + "inner join idclassroll "
                    + "ON idclassroll.STUDENTID=studentdetails.STUDENTID "
                    + "WHERE idclassroll.CLASS= '"+clas+"' AND idclassroll.YEAR='"+year+"' ORDER BY idclassroll.ROLLNO ASC");
            rs = pstmt.executeQuery();
            while(rs.next())
            {
                names.add(rs.getString("NAME"));
                studentid.add(rs.getInt("STUDENTID"));
                rollno.add(rs.getInt("ROLLNO"));
            }
            pstmt2 = con.prepareStatement("select SUBJECTS FROM subject where CLASS='"+clas+"' AND YEAR='"+year+"'");
            rs2 = pstmt2.executeQuery();
            
            //adding name for the header of the first column
            //subjects arrylist will act as a header
            subjects.add("ROLLNO");
            subjects.add("NAME");
            while(rs2.next())
            {
                subjects.add(rs2.getString("SUBJECTS"));
            }
            subjects.add("TotalOM");
            subjects.add("Percentage");
            subjects.add("Grade");
            subjects.add("Position");
            subjects.add("Attendance");
            model.setColumnIdentifiers(subjects.toArray());
            tableMarkLedger.setModel(model);
            
            
            //adding to table rows
            for(int i=0;i<names.size();i++)
            {
                model.addRow(new Object[]{rollno.get(i),names.get(i)});
            }
            
            
            
            //now for each studentid draw obtained marks to om arraylist
            for(int j=2;j<subjects.size()-1;j++)
            {
                for(int k=0;k<names.size();k++)
                {
                    DecimalFormat df = new DecimalFormat("#.##");
                    term="1";
                    pstmt = con.prepareStatement("SELECT OBTAINEDMARKS from  om"
                            + " WHERE om.CLASS= '"+clas+"' AND om.YEAR='"+year+"' AND om.SUBJECTS='"+subjects.get(j)+"' AND om.STUDENTID='"+studentid.get(k)+"' AND om.TERM='"+term+"'");
                    rs = pstmt.executeQuery();
                                        
                    while(rs.next())
                    {
                        float firstep = Float.parseFloat(textFirstep.getText());
                        model.setValueAt((Object)(firstep*rs.getFloat("OBTAINEDMARKS")/100), k,j);
                        
                    }
                                        
                    term = "2";
                    pstmt2 = con.prepareStatement("SELECT OBTAINEDMARKS from  om"
                            + " WHERE om.CLASS= '"+clas+"' AND om.YEAR='"+year+"' AND om.SUBJECTS='"+subjects.get(j)+"' AND om.STUDENTID='"+studentid.get(k)+"' AND om.TERM='"+term+"'");
                    rs2 = pstmt2.executeQuery();
                    while(rs2.next())
                    {                        
                        float secondep = Float.parseFloat(textSecondep.getText());
                        
                        model.setValueAt((Object)((secondep*rs2.getFloat("OBTAINEDMARKS")/100)+(Float)tableMarkLedger.getModel().getValueAt(k,j)), k,j);
                        
                    }
                    
                    term = "3";
                    pstmt3 = con.prepareStatement("SELECT OBTAINEDMARKS from  om"
                            + " WHERE om.CLASS= '"+clas+"' AND om.YEAR='"+year+"' AND om.SUBJECTS='"+subjects.get(j)+"' AND om.STUDENTID='"+studentid.get(k)+"' AND om.TERM='"+term+"'");
                    rs3 = pstmt3.executeQuery();
                    while(rs3.next())
                    {                        
                        float thirdep = Float.parseFloat(textThirdep.getText());
                        model.setValueAt((Object)((thirdep*rs3.getFloat("OBTAINEDMARKS")/100)+(Float)tableMarkLedger.getModel().getValueAt(k,j)), k,j);
                    }
                    
                    term = "4";
                    pstmt4 = con.prepareStatement("SELECT OBTAINEDMARKS from  om"
                            + " WHERE om.CLASS= '"+clas+"' AND om.YEAR='"+year+"' AND om.SUBJECTS='"+subjects.get(j)+"' AND om.STUDENTID='"+studentid.get(k)+"' AND om.TERM='"+term+"'");
                    rs4 = pstmt4.executeQuery();
                    
                    
                    while(rs4.next())
                    {                        
                        float fourthep = Float.parseFloat(textFourthep.getText());
                        model.setValueAt((Object)((fourthep*rs4.getFloat("OBTAINEDMARKS")/100)+(Float)tableMarkLedger.getModel().getValueAt(k,j)), k,j);
                    }
                    model.setValueAt(df.format(tableMarkLedger.getModel().getValueAt(k,j)), k, j);
                }
            }
            
            tableMarkLedger.getColumnModel().getColumn(0).setPreferredWidth(35);
            tableMarkLedger.getColumnModel().getColumn(1).setPreferredWidth(140);
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null, "Error:"+e);
        }
    }
    private String getTerm(String term)
    {
        String exam = null;
        if(null != term)
            switch (term) {
                case "First Terminal Exam":
                    exam = "1";
                    break;
                case "Second Terminal Exam":
                    exam= "2";
                    break;
                case "Third Terminal Exam":
                    exam= "3";
                    break;
                default:
                    exam= "4";
                    break;
            }
        //tested works
        return exam;
    }
    private void fillComboClass()
    {
        String clas;
        ResultSet rs;
        try
        {
            DBConnect.DBconnection roy = new DBconnection();
            Connection con = roy.getConnection();
            java.sql.PreparedStatement pstmt;
            pstmt = con.prepareStatement("select * from class");
            rs = pstmt.executeQuery();
            while(rs.next())
            {
                clas = rs.getString("classes");
                comboClass.addItem(clas);
            }
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null, "Error: "+e);
        }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MarkLedger.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MarkLedger.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MarkLedger.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MarkLedger.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MarkLedger().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox comboClass;
    private javax.swing.JComboBox comboTermexam;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tableMarkLedger;
    private javax.swing.JTextField textA;
    private javax.swing.JTextField textAplus;
    private javax.swing.JTextField textB;
    private javax.swing.JTextField textBplus;
    private javax.swing.JTextField textC;
    private javax.swing.JTextField textCplus;
    private javax.swing.JTextField textD;
    private javax.swing.JTextField textE;
    private javax.swing.JTextField textFirstep;
    private javax.swing.JTextField textFourthep;
    private javax.swing.JTextField textSecondep;
    private javax.swing.JTextField textThirdep;
    private javax.swing.JTextField textYear;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables
}
